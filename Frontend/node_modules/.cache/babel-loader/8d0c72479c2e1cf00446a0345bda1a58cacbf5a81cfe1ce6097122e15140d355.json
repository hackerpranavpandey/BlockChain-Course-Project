{"ast":null,"code":"var _jsxFileName = \"/home/pranav/Documents/Blockchain-Project/Blockchain-Project/Blockchain-Project/t/client/src/components/FileUpload.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport \"./FileUpload.css\";\nimport { toast } from \"react-toastify\"; // Assuming you use react-toastify\n\n// Helper function to calculate SHA-256 hash of a file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst calculateFileHash = async file => {\n  const buffer = await file.arrayBuffer();\n  const hashBuffer = await crypto.subtle.digest(\"SHA-256\", buffer);\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\n  const hashHex = hashArray.map(b => b.toString(16).padStart(2, \"0\")).join(\"\");\n  return hashHex;\n};\n\n// --- Configuration ---\nconst PINATA_API_KEY = \"ae1ba446a9aeca73624c\"; // Replace with your actual key\nconst PINATA_SECRET_API_KEY = \"b30349d6044ed59285ba496207015af363c7ad38dcefdca17fa96481b9f9360d\"; // Replace with your actual secret\n\nconst CONSENSUS_THRESHOLD = 0.5; // More than 50% votes needed for consensus\nconst NODE_REQUEST_TIMEOUT = 15000; // 15 seconds timeout for each node request\n\n// URLs for your deepfake detection nodes (running the updated backend.py)\nconst DEEPFAKE_NODE_URLS = [\"http://localhost:5001/predict\", \"http://localhost:5002/predict\", \"http://localhost:5003/predict\"];\nconst FileUpload = ({\n  contract,\n  account,\n  provider\n}) => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [fileName, setFileName] = useState(\"No file selected\"); // Updated default text\n  const [isLoading, setIsLoading] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [fileHash, setFileHash] = useState(\"\"); // Renamed from imageHash\n\n  const retrieveFile = e => {\n    const selected = e.target.files[0];\n    if (selected) {\n      // Basic frontend check (backend performs the definitive check)\n      const acceptedImageTypes = ['image/png', 'image/jpeg', 'image/jpg', 'image/gif', 'image/webp'];\n      const acceptedVideoTypes = ['video/mp4', 'video/webm', 'video/ogg', 'video/quicktime', 'video/x-msvideo', 'video/avi', 'video/mov', 'video/mkv'];\n      if (!acceptedImageTypes.includes(selected.type) && !acceptedVideoTypes.includes(selected.type)) {\n        const errorMsg = `⚠️ Unsupported file type: ${selected.type || 'Unknown'}. Please select a supported image or video.`;\n        setMessage(errorMsg);\n        toast.error(errorMsg); // Notify user\n        setFile(null);\n        setFileName(\"No file selected\");\n        setFileHash(\"\");\n        e.target.value = null; // Reset file input visually\n        return;\n      }\n      setFile(selected);\n      setFileName(selected.name);\n      setMessage(\"\"); // Clear previous messages\n      setFileHash(\"\"); // Clear hash for new file\n      toast.success(\"Image/Video file selected\"); // Updated message\n    } else {\n      setFile(null);\n      setFileName(\"No file selected\");\n      setFileHash(\"\");\n    }\n  };\n\n  // Consensus logic (expects confidence 0.0-1.0 from backend)\n  const determineConsensus = results => {\n    if (!results || results.length === 0) {\n      return {\n        consensus: \"inconclusive\",\n        reason: \"No valid responses from nodes.\"\n      };\n    }\n    let realVotes = 0;\n    let fakeVotes = 0;\n    // Confidence here represents confidence IN THE PREDICTED CLASS (0.0 to 1.0)\n    let totalConfidenceReal = 0; // Sum of confidences when predicted REAL\n    let totalConfidenceFake = 0; // Sum of confidences when predicted FAKE\n\n    results.forEach(result => {\n      // Ensure confidence is a number between 0 and 1\n      const confidence = typeof result.confidence === 'number' && result.confidence >= 0 && result.confidence <= 1 ? result.confidence : null;\n      if (confidence === null) {\n        console.warn(\"Received invalid confidence value:\", result.confidence);\n        // Optionally count as an invalid vote or ignore\n        return; // Skip this result for consensus calculation\n      }\n      if (result.is_deepfake === true) {\n        fakeVotes++;\n        totalConfidenceFake += confidence; // Add confidence for fake prediction\n      } else if (result.is_deepfake === false) {\n        realVotes++;\n        totalConfidenceReal += confidence; // Add confidence for real prediction\n      }\n    });\n    const totalVotes = realVotes + fakeVotes;\n    if (totalVotes === 0) {\n      return {\n        consensus: \"inconclusive\",\n        reason: \"No nodes provided a clear real/fake vote with valid confidence.\"\n      };\n    }\n    const realRatio = realVotes / totalVotes;\n    const fakeRatio = fakeVotes / totalVotes;\n    console.log(`Consensus Check: Real Votes=${realVotes}, Fake Votes=${fakeVotes}, Total Votes=${totalVotes}`);\n    if (realRatio > CONSENSUS_THRESHOLD) {\n      // Average confidence of the nodes that voted REAL\n      const avgConfidence = realVotes > 0 ? totalConfidenceReal / realVotes * 100 : 0; // Convert avg back to percentage for display\n      return {\n        consensus: \"real\",\n        confidence: avgConfidence,\n        votes: `${realVotes}/${totalVotes}`\n      };\n    } else if (fakeRatio > CONSENSUS_THRESHOLD) {\n      // Average confidence of the nodes that voted FAKE\n      const avgConfidence = fakeVotes > 0 ? totalConfidenceFake / fakeVotes * 100 : 0; // Convert avg back to percentage for display\n      return {\n        consensus: \"deepfake\",\n        confidence: avgConfidence,\n        votes: `${fakeVotes}/${totalVotes}`\n      };\n    } else {\n      return {\n        consensus: \"inconclusive\",\n        reason: `No clear majority (${realVotes} real, ${fakeVotes} fake).`\n      };\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!file) {\n      setMessage(\"Please select an image or video file first.\"); // Updated message\n      return;\n    }\n    if (!contract || !account) {\n      setMessage(\"Wallet not connected or contract not loaded.\");\n      return;\n    }\n    setIsLoading(true);\n    setMessage(\"Processing file...\"); // Updated message\n    setFileHash(\"\");\n    try {\n      var _consensusOutcome$con2;\n      // --- Step 1: Calculate Hash ---\n      setMessage(\"Calculating file hash...\");\n      const calculatedHash = await calculateFileHash(file);\n      setFileHash(calculatedHash); // Use the correct state setter\n      console.log(\"Calculated File Hash:\", calculatedHash);\n      toast.info(`File Hash: ${calculatedHash.substring(0, 10)}...`);\n      setMessage(\"File hash calculated. Analyzing for deepfakes via nodes...\");\n\n      // --- Step 2: Send to Deepfake Nodes ---\n      const deepfakeFormData = new FormData();\n      // !!! IMPORTANT: Use 'file' as the key to match the updated backend !!!\n      deepfakeFormData.append('file', file);\n      const promises = DEEPFAKE_NODE_URLS.map(url => {\n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => controller.abort(), NODE_REQUEST_TIMEOUT);\n        return fetch(url, {\n          method: \"POST\",\n          body: deepfakeFormData,\n          // Send the same data object to all\n          signal: controller.signal\n        }).then(async response => {\n          clearTimeout(timeoutId);\n          if (!response.ok) {\n            let errorMsg = `Node ${url} failed: ${response.status}`;\n            try {\n              const errData = await response.json();\n              errorMsg = errData.error || errorMsg;\n            } catch (parseErr) {/* ignore */}\n            throw new Error(errorMsg); // Throw error for failed requests\n          }\n          return response.json(); // Parse successful JSON response\n        }).catch(error => {\n          clearTimeout(timeoutId);\n          console.warn(`Node request failed for ${url}: ${error.message}`);\n          // Re-throw the error so Promise.allSettled captures it as 'rejected'\n          // Include URL in the error message for better debugging\n          throw new Error(`Node ${url}: ${error.message}`);\n        });\n      });\n      setMessage(`Sent requests to ${DEEPFAKE_NODE_URLS.length} nodes. Awaiting responses...`);\n      const results = await Promise.allSettled(promises);\n\n      // --- Step 3: Process Node Responses ---\n      const successfulResults = [];\n      let nodeErrors = 0;\n      results.forEach((result, index) => {\n        if (result.status === \"fulfilled\") {\n          var _result$value, _result$value2;\n          console.log(`Node ${DEEPFAKE_NODE_URLS[index]} Result:`, result.value);\n          // Validate the structure received from the backend\n          if (typeof ((_result$value = result.value) === null || _result$value === void 0 ? void 0 : _result$value.is_deepfake) === \"boolean\" && typeof ((_result$value2 = result.value) === null || _result$value2 === void 0 ? void 0 : _result$value2.confidence) === \"number\") {\n            successfulResults.push(result.value);\n          } else {\n            console.warn(`Node ${DEEPFAKE_NODE_URLS[index]} returned invalid data format:`, result.value);\n            nodeErrors++;\n          }\n        } else {\n          var _result$reason;\n          // Log the reason for rejection captured by allSettled\n          console.error(`Node ${DEEPFAKE_NODE_URLS[index]} Failed:`, ((_result$reason = result.reason) === null || _result$reason === void 0 ? void 0 : _result$reason.message) || result.reason);\n          nodeErrors++;\n        }\n      });\n      setMessage(`Received responses. ${successfulResults.length} successful, ${nodeErrors} failed/invalid. Determining consensus...`);\n\n      // --- Step 4: Determine Consensus Outcome ---\n      const consensusOutcome = determineConsensus(successfulResults);\n      console.log(\"Consensus Outcome:\", consensusOutcome);\n\n      // --- Step 5: Act based on Consensus ---\n      if (consensusOutcome.consensus === \"deepfake\") {\n        var _consensusOutcome$con;\n        setMessage(`⚠️ Consensus: Deepfake Detected (${consensusOutcome.votes} votes, avg conf ${(_consensusOutcome$con = consensusOutcome.confidence) === null || _consensusOutcome$con === void 0 ? void 0 : _consensusOutcome$con.toFixed(2)}%). Upload cancelled. Hash: ${calculatedHash.substring(0, 10)}...`);\n        toast.warn(\"DeepFake detected by consensus! Upload blocked.\");\n        setFile(null); // Clear selection\n        setFileName(\"No file selected\");\n        setIsLoading(false);\n        return; // Stop the process\n      }\n      if (consensusOutcome.consensus === \"inconclusive\") {\n        setMessage(`🤔 Consensus Inconclusive: ${consensusOutcome.reason}. Upload cancelled.`);\n        toast.info(\"Consensus on deepfake status was inconclusive. Upload blocked.\");\n        setFile(null); // Clear selection\n        setFileName(\"No file selected\");\n        setIsLoading(false);\n        return; // Stop the process\n      }\n\n      // --- Step 6: Proceed if Consensus is REAL ---\n      setMessage(`✅ Consensus: Real File Detected (${consensusOutcome.votes} votes, avg conf ${(_consensusOutcome$con2 = consensusOutcome.confidence) === null || _consensusOutcome$con2 === void 0 ? void 0 : _consensusOutcome$con2.toFixed(2)}%). Proceeding with IPFS upload...` // Updated message\n      );\n      toast.success(\"File determined to be real by consensus.\");\n\n      // --- Step 7: Upload to Pinata ---\n      setMessage(\"Uploading file to IPFS via Pinata...\");\n      const pinataFormData = new FormData();\n      pinataFormData.append(\"file\", file); // Use 'file' key\n      const pinataMetadata = JSON.stringify({\n        name: fileName,\n        keyvalues: {\n          fileHash: calculatedHash\n        } // Use generic 'fileHash'\n      });\n      pinataFormData.append(\"pinataMetadata\", pinataMetadata);\n      const pinataOptions = JSON.stringify({\n        cidVersion: 1\n      }); // Using CID v1\n      pinataFormData.append(\"pinataOptions\", pinataOptions);\n      const resFile = await axios.post(\"https://api.pinata.cloud/pinning/pinFileToIPFS\", pinataFormData, {\n        headers: {\n          // Axios will set Content-Type with boundary correctly for FormData\n          'pinata_api_key': PINATA_API_KEY,\n          'pinata_secret_api_key': PINATA_SECRET_API_KEY\n        },\n        // Optional: Add progress tracking for large files\n        onUploadProgress: progressEvent => {\n          const percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n          setMessage(`Uploading to IPFS: ${percentCompleted}%`);\n        }\n      });\n      const fileCid = resFile.data.IpfsHash; // Renamed variable\n      console.log(\"File uploaded to Pinata. CID:\", fileCid);\n      if (!fileCid) throw new Error(\"Failed to get IPFS hash from Pinata response.\");\n      setMessage(`File uploaded to IPFS (CID: ${fileCid.substring(0, 10)}...). Adding to blockchain...`);\n      toast.success(\"File Uploaded to Pinata!\");\n\n      // --- Step 8: Add CID and Hash to Blockchain ---\n      // Ensure your contract's 'add' function signature matches: (address owner, string memory cid, string memory fileHash)\n      console.log(`Calling contract.add(\"${account}\", \"${fileCid}\", \"${calculatedHash}\")`);\n      const transaction = await contract.add(account, fileCid, calculatedHash);\n      setMessage(`Transaction sent (${transaction.hash.substring(0, 10)}...). Waiting for confirmation...`);\n      await transaction.wait();\n      setMessage(`✅ Successfully uploaded. CID and Hash recorded on the blockchain!`);\n      toast.success(\"Successfully uploaded. CID and Hash recorded on the blockchain!\");\n      setFileName(\"No file selected\");\n      setFile(null); // Clear file input state\n    } catch (error) {\n      var _error$message, _error$response, _error$response$data, _error$data;\n      console.error(\"Upload process failed:\", error);\n      let specificMessage = `Upload failed: ${error.message || 'Unknown error'}`;\n      // Provide more context based on error type\n      if ((_error$message = error.message) !== null && _error$message !== void 0 && _error$message.includes(\"Node\")) {\n        // Error from fetch/node communication\n        specificMessage = `Node verification error: ${error.message}`;\n      } else if ((_error$response = error.response) !== null && _error$response !== void 0 && (_error$response$data = _error$response.data) !== null && _error$response$data !== void 0 && _error$response$data.error) {\n        // Error from Pinata (Axios response)\n        specificMessage = `Pinata upload error: ${error.response.data.error}`;\n      } else if (error.code === \"ACTION_REJECTED\") {\n        // MetaMask rejection\n        specificMessage = \"Transaction rejected in MetaMask.\";\n      } else if (error.reason || (_error$data = error.data) !== null && _error$data !== void 0 && _error$data.message) {\n        // Blockchain transaction revert\n        specificMessage = `Blockchain transaction failed: ${error.reason || error.data.message}`;\n      }\n      setMessage(`❌ ${specificMessage}`);\n      toast.error(specificMessage); // Show error toast\n    } finally {\n      setIsLoading(false); // Ensure loading indicator stops\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"top file-upload-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Upload & Authenticate Image or Video\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"file-upload\",\n        className: `choose ${!account || isLoading ? \"disabled\" : \"\"}`,\n        children: file ? `Change File: ${fileName}` : \"Choose Image / Video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        disabled: !account || isLoading,\n        type: \"file\"\n        // *** Updated accept attribute for images AND common video types ***\n        ,\n        accept: \"image/png, image/jpeg, image/jpg, image/gif, image/webp, video/mp4, video/webm, video/ogg, video/quicktime, video/x-msvideo, video/avi, video/mov, video/mkv\",\n        id: \"file-upload\",\n        name: \"file\" // Ensure name matches key used in FormData\n        ,\n        onChange: retrieveFile,\n        style: {\n          display: 'none'\n        } // Keep hidden if using label trick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"textArea file-name-display\",\n        children: [\"File: \", fileName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"upload\",\n        disabled: !file || isLoading || !account,\n        children: isLoading ? \"Processing...\" : \"Verify & Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: `upload-message ${message.includes(\"Error\") || message.includes(\"⚠️\") || message.includes(\"❌\") || message.includes(\"🤔\") ? \"error\" : message.includes(\"✅\") ? \"success\" : \"info\"}`,\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 9\n    }, this), fileHash && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"hash-display\",\n      children: [\"File Hash: \", fileHash.substring(0, 10), \"...\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 309,\n    columnNumber: 5\n  }, this);\n};\n_s(FileUpload, \"5bSaHGbHmuH20+BXmEdEgflF2pY=\");\n_c = FileUpload;\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["useState","axios","toast","jsxDEV","_jsxDEV","calculateFileHash","file","buffer","arrayBuffer","hashBuffer","crypto","subtle","digest","hashArray","Array","from","Uint8Array","hashHex","map","b","toString","padStart","join","PINATA_API_KEY","PINATA_SECRET_API_KEY","CONSENSUS_THRESHOLD","NODE_REQUEST_TIMEOUT","DEEPFAKE_NODE_URLS","FileUpload","contract","account","provider","_s","setFile","fileName","setFileName","isLoading","setIsLoading","message","setMessage","fileHash","setFileHash","retrieveFile","e","selected","target","files","acceptedImageTypes","acceptedVideoTypes","includes","type","errorMsg","error","value","name","success","determineConsensus","results","length","consensus","reason","realVotes","fakeVotes","totalConfidenceReal","totalConfidenceFake","forEach","result","confidence","console","warn","is_deepfake","totalVotes","realRatio","fakeRatio","log","avgConfidence","votes","handleSubmit","preventDefault","_consensusOutcome$con2","calculatedHash","info","substring","deepfakeFormData","FormData","append","promises","url","controller","AbortController","timeoutId","setTimeout","abort","fetch","method","body","signal","then","response","clearTimeout","ok","status","errData","json","parseErr","Error","catch","Promise","allSettled","successfulResults","nodeErrors","index","_result$value","_result$value2","push","_result$reason","consensusOutcome","_consensusOutcome$con","toFixed","pinataFormData","pinataMetadata","JSON","stringify","keyvalues","pinataOptions","cidVersion","resFile","post","headers","onUploadProgress","progressEvent","percentCompleted","Math","round","loaded","total","fileCid","data","IpfsHash","transaction","add","hash","wait","_error$message","_error$response","_error$response$data","_error$data","specificMessage","code","className","children","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","disabled","accept","id","onChange","style","display","_c","$RefreshReg$"],"sources":["/home/pranav/Documents/Blockchain-Project/Blockchain-Project/Blockchain-Project/t/client/src/components/FileUpload.js"],"sourcesContent":["import { useState } from \"react\";\nimport axios from \"axios\";\nimport \"./FileUpload.css\";\nimport { toast } from \"react-toastify\"; // Assuming you use react-toastify\n\n// Helper function to calculate SHA-256 hash of a file\nconst calculateFileHash = async (file) => {\n  const buffer = await file.arrayBuffer();\n  const hashBuffer = await crypto.subtle.digest(\"SHA-256\", buffer);\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\n  const hashHex = hashArray\n    .map((b) => b.toString(16).padStart(2, \"0\"))\n    .join(\"\");\n  return hashHex;\n};\n\n// --- Configuration ---\nconst PINATA_API_KEY = \"ae1ba446a9aeca73624c\"; // Replace with your actual key\nconst PINATA_SECRET_API_KEY = \"b30349d6044ed59285ba496207015af363c7ad38dcefdca17fa96481b9f9360d\"; // Replace with your actual secret\n\nconst CONSENSUS_THRESHOLD = 0.5; // More than 50% votes needed for consensus\nconst NODE_REQUEST_TIMEOUT = 15000; // 15 seconds timeout for each node request\n\n// URLs for your deepfake detection nodes (running the updated backend.py)\nconst DEEPFAKE_NODE_URLS = [\n  \"http://localhost:5001/predict\",\n  \"http://localhost:5002/predict\",\n  \"http://localhost:5003/predict\",\n];\n\nconst FileUpload = ({ contract, account, provider }) => {\n  const [file, setFile] = useState(null);\n  const [fileName, setFileName] = useState(\"No file selected\"); // Updated default text\n  const [isLoading, setIsLoading] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [fileHash, setFileHash] = useState(\"\"); // Renamed from imageHash\n\n  const retrieveFile = (e) => {\n    const selected = e.target.files[0];\n    if (selected) {\n      // Basic frontend check (backend performs the definitive check)\n      const acceptedImageTypes = ['image/png', 'image/jpeg', 'image/jpg', 'image/gif', 'image/webp'];\n      const acceptedVideoTypes = ['video/mp4', 'video/webm', 'video/ogg', 'video/quicktime', 'video/x-msvideo', 'video/avi', 'video/mov', 'video/mkv'];\n      if (!acceptedImageTypes.includes(selected.type) && !acceptedVideoTypes.includes(selected.type)) {\n         const errorMsg = `⚠️ Unsupported file type: ${selected.type || 'Unknown'}. Please select a supported image or video.`;\n         setMessage(errorMsg);\n         toast.error(errorMsg); // Notify user\n         setFile(null);\n         setFileName(\"No file selected\");\n         setFileHash(\"\");\n         e.target.value = null; // Reset file input visually\n         return;\n      }\n      setFile(selected);\n      setFileName(selected.name);\n      setMessage(\"\"); // Clear previous messages\n      setFileHash(\"\"); // Clear hash for new file\n      toast.success(\"Image/Video file selected\"); // Updated message\n    } else {\n      setFile(null);\n      setFileName(\"No file selected\");\n      setFileHash(\"\");\n    }\n  };\n\n  // Consensus logic (expects confidence 0.0-1.0 from backend)\n  const determineConsensus = (results) => {\n    if (!results || results.length === 0) {\n      return { consensus: \"inconclusive\", reason: \"No valid responses from nodes.\" };\n    }\n\n    let realVotes = 0;\n    let fakeVotes = 0;\n    // Confidence here represents confidence IN THE PREDICTED CLASS (0.0 to 1.0)\n    let totalConfidenceReal = 0; // Sum of confidences when predicted REAL\n    let totalConfidenceFake = 0; // Sum of confidences when predicted FAKE\n\n    results.forEach((result) => {\n      // Ensure confidence is a number between 0 and 1\n      const confidence = typeof result.confidence === 'number' && result.confidence >= 0 && result.confidence <= 1\n                          ? result.confidence\n                          : null;\n\n      if (confidence === null) {\n          console.warn(\"Received invalid confidence value:\", result.confidence);\n          // Optionally count as an invalid vote or ignore\n          return; // Skip this result for consensus calculation\n      }\n\n      if (result.is_deepfake === true) {\n        fakeVotes++;\n        totalConfidenceFake += confidence; // Add confidence for fake prediction\n      } else if (result.is_deepfake === false) {\n        realVotes++;\n        totalConfidenceReal += confidence; // Add confidence for real prediction\n      }\n    });\n\n    const totalVotes = realVotes + fakeVotes;\n    if (totalVotes === 0) {\n      return { consensus: \"inconclusive\", reason: \"No nodes provided a clear real/fake vote with valid confidence.\" };\n    }\n\n    const realRatio = realVotes / totalVotes;\n    const fakeRatio = fakeVotes / totalVotes;\n\n    console.log(\n      `Consensus Check: Real Votes=${realVotes}, Fake Votes=${fakeVotes}, Total Votes=${totalVotes}`\n    );\n\n    if (realRatio > CONSENSUS_THRESHOLD) {\n      // Average confidence of the nodes that voted REAL\n      const avgConfidence = realVotes > 0 ? (totalConfidenceReal / realVotes) * 100 : 0; // Convert avg back to percentage for display\n      return { consensus: \"real\", confidence: avgConfidence, votes: `${realVotes}/${totalVotes}` };\n    } else if (fakeRatio > CONSENSUS_THRESHOLD) {\n      // Average confidence of the nodes that voted FAKE\n      const avgConfidence = fakeVotes > 0 ? (totalConfidenceFake / fakeVotes) * 100 : 0; // Convert avg back to percentage for display\n      return { consensus: \"deepfake\", confidence: avgConfidence, votes: `${fakeVotes}/${totalVotes}` };\n    } else {\n      return { consensus: \"inconclusive\", reason: `No clear majority (${realVotes} real, ${fakeVotes} fake).` };\n    }\n  };\n\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!file) {\n      setMessage(\"Please select an image or video file first.\"); // Updated message\n      return;\n    }\n    if (!contract || !account) {\n      setMessage(\"Wallet not connected or contract not loaded.\");\n      return;\n    }\n\n    setIsLoading(true);\n    setMessage(\"Processing file...\"); // Updated message\n    setFileHash(\"\");\n\n    try {\n      // --- Step 1: Calculate Hash ---\n      setMessage(\"Calculating file hash...\");\n      const calculatedHash = await calculateFileHash(file);\n      setFileHash(calculatedHash); // Use the correct state setter\n      console.log(\"Calculated File Hash:\", calculatedHash);\n      toast.info(`File Hash: ${calculatedHash.substring(0, 10)}...`);\n      setMessage(\"File hash calculated. Analyzing for deepfakes via nodes...\");\n\n      // --- Step 2: Send to Deepfake Nodes ---\n      const deepfakeFormData = new FormData();\n      // !!! IMPORTANT: Use 'file' as the key to match the updated backend !!!\n      deepfakeFormData.append('file', file);\n\n      const promises = DEEPFAKE_NODE_URLS.map((url) => {\n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => controller.abort(), NODE_REQUEST_TIMEOUT);\n\n        return fetch(url, {\n          method: \"POST\",\n          body: deepfakeFormData, // Send the same data object to all\n          signal: controller.signal,\n        })\n          .then(async (response) => {\n            clearTimeout(timeoutId);\n            if (!response.ok) {\n              let errorMsg = `Node ${url} failed: ${response.status}`;\n              try { const errData = await response.json(); errorMsg = errData.error || errorMsg; }\n              catch (parseErr) { /* ignore */ }\n              throw new Error(errorMsg); // Throw error for failed requests\n            }\n            return response.json(); // Parse successful JSON response\n          })\n          .catch((error) => {\n            clearTimeout(timeoutId);\n            console.warn(`Node request failed for ${url}: ${error.message}`);\n            // Re-throw the error so Promise.allSettled captures it as 'rejected'\n            // Include URL in the error message for better debugging\n            throw new Error(`Node ${url}: ${error.message}`);\n          });\n      });\n\n      setMessage(`Sent requests to ${DEEPFAKE_NODE_URLS.length} nodes. Awaiting responses...`);\n      const results = await Promise.allSettled(promises);\n\n      // --- Step 3: Process Node Responses ---\n      const successfulResults = [];\n      let nodeErrors = 0;\n      results.forEach((result, index) => {\n        if (result.status === \"fulfilled\") {\n          console.log(`Node ${DEEPFAKE_NODE_URLS[index]} Result:`, result.value);\n          // Validate the structure received from the backend\n          if (typeof result.value?.is_deepfake === \"boolean\" && typeof result.value?.confidence === \"number\") {\n            successfulResults.push(result.value);\n          } else {\n            console.warn(`Node ${DEEPFAKE_NODE_URLS[index]} returned invalid data format:`, result.value);\n            nodeErrors++;\n          }\n        } else {\n          // Log the reason for rejection captured by allSettled\n          console.error(`Node ${DEEPFAKE_NODE_URLS[index]} Failed:`, result.reason?.message || result.reason);\n          nodeErrors++;\n        }\n      });\n\n      setMessage(`Received responses. ${successfulResults.length} successful, ${nodeErrors} failed/invalid. Determining consensus...`);\n\n      // --- Step 4: Determine Consensus Outcome ---\n      const consensusOutcome = determineConsensus(successfulResults);\n      console.log(\"Consensus Outcome:\", consensusOutcome);\n\n      // --- Step 5: Act based on Consensus ---\n      if (consensusOutcome.consensus === \"deepfake\") {\n        setMessage(\n          `⚠️ Consensus: Deepfake Detected (${consensusOutcome.votes} votes, avg conf ${consensusOutcome.confidence?.toFixed(2)}%). Upload cancelled. Hash: ${calculatedHash.substring(0, 10)}...`\n        );\n        toast.warn(\"DeepFake detected by consensus! Upload blocked.\");\n        setFile(null); // Clear selection\n        setFileName(\"No file selected\");\n        setIsLoading(false);\n        return; // Stop the process\n      }\n\n      if (consensusOutcome.consensus === \"inconclusive\") {\n        setMessage(\n          `🤔 Consensus Inconclusive: ${consensusOutcome.reason}. Upload cancelled.`\n        );\n        toast.info(\"Consensus on deepfake status was inconclusive. Upload blocked.\");\n        setFile(null); // Clear selection\n        setFileName(\"No file selected\");\n        setIsLoading(false);\n        return; // Stop the process\n      }\n\n      // --- Step 6: Proceed if Consensus is REAL ---\n      setMessage(\n        `✅ Consensus: Real File Detected (${consensusOutcome.votes} votes, avg conf ${consensusOutcome.confidence?.toFixed(2)}%). Proceeding with IPFS upload...` // Updated message\n      );\n      toast.success(\"File determined to be real by consensus.\");\n\n      // --- Step 7: Upload to Pinata ---\n      setMessage(\"Uploading file to IPFS via Pinata...\");\n      const pinataFormData = new FormData();\n      pinataFormData.append(\"file\", file); // Use 'file' key\n      const pinataMetadata = JSON.stringify({\n        name: fileName,\n        keyvalues: { fileHash: calculatedHash }, // Use generic 'fileHash'\n      });\n      pinataFormData.append(\"pinataMetadata\", pinataMetadata);\n      const pinataOptions = JSON.stringify({ cidVersion: 1 }); // Using CID v1\n      pinataFormData.append(\"pinataOptions\", pinataOptions);\n\n      const resFile = await axios.post(\n        \"https://api.pinata.cloud/pinning/pinFileToIPFS\",\n        pinataFormData,\n        {\n          headers: {\n            // Axios will set Content-Type with boundary correctly for FormData\n            'pinata_api_key': PINATA_API_KEY,\n            'pinata_secret_api_key': PINATA_SECRET_API_KEY,\n          },\n          // Optional: Add progress tracking for large files\n           onUploadProgress: (progressEvent) => {\n             const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n             setMessage(`Uploading to IPFS: ${percentCompleted}%`);\n           }\n        }\n      );\n      const fileCid = resFile.data.IpfsHash; // Renamed variable\n      console.log(\"File uploaded to Pinata. CID:\", fileCid);\n      if (!fileCid) throw new Error(\"Failed to get IPFS hash from Pinata response.\");\n\n      setMessage(`File uploaded to IPFS (CID: ${fileCid.substring(0, 10)}...). Adding to blockchain...`);\n      toast.success(\"File Uploaded to Pinata!\");\n\n      // --- Step 8: Add CID and Hash to Blockchain ---\n      // Ensure your contract's 'add' function signature matches: (address owner, string memory cid, string memory fileHash)\n      console.log(`Calling contract.add(\"${account}\", \"${fileCid}\", \"${calculatedHash}\")`);\n      const transaction = await contract.add(account, fileCid, calculatedHash);\n      setMessage(`Transaction sent (${transaction.hash.substring(0, 10)}...). Waiting for confirmation...`);\n      await transaction.wait();\n\n      setMessage(`✅ Successfully uploaded. CID and Hash recorded on the blockchain!`);\n      toast.success(\"Successfully uploaded. CID and Hash recorded on the blockchain!\");\n      setFileName(\"No file selected\");\n      setFile(null); // Clear file input state\n\n    } catch (error) {\n      console.error(\"Upload process failed:\", error);\n      let specificMessage = `Upload failed: ${error.message || 'Unknown error'}`;\n      // Provide more context based on error type\n      if (error.message?.includes(\"Node\")) { // Error from fetch/node communication\n        specificMessage = `Node verification error: ${error.message}`;\n      } else if (error.response?.data?.error) { // Error from Pinata (Axios response)\n        specificMessage = `Pinata upload error: ${error.response.data.error}`;\n      } else if (error.code === \"ACTION_REJECTED\") { // MetaMask rejection\n        specificMessage = \"Transaction rejected in MetaMask.\";\n      } else if (error.reason || error.data?.message) { // Blockchain transaction revert\n        specificMessage = `Blockchain transaction failed: ${error.reason || error.data.message}`;\n      }\n      setMessage(`❌ ${specificMessage}`);\n      toast.error(specificMessage); // Show error toast\n\n    } finally {\n      setIsLoading(false); // Ensure loading indicator stops\n    }\n  };\n\n  return (\n    <div className=\"top file-upload-container\">\n      {/* Updated Title */}\n      <h3>Upload & Authenticate Image or Video</h3>\n      <form className=\"form\" onSubmit={handleSubmit}>\n        <label\n          htmlFor=\"file-upload\"\n          className={`choose ${!account || isLoading ? \"disabled\" : \"\"}`}\n        >\n          {/* Updated Label Text */}\n          {file ? `Change File: ${fileName}` : \"Choose Image / Video\"}\n        </label>\n        <input\n          disabled={!account || isLoading}\n          type=\"file\"\n          // *** Updated accept attribute for images AND common video types ***\n          accept=\"image/png, image/jpeg, image/jpg, image/gif, image/webp, video/mp4, video/webm, video/ogg, video/quicktime, video/x-msvideo, video/avi, video/mov, video/mkv\"\n          id=\"file-upload\"\n          name=\"file\" // Ensure name matches key used in FormData\n          onChange={retrieveFile}\n          style={{ display: 'none' }} // Keep hidden if using label trick\n        />\n        {/* Updated Text */}\n        <span className=\"textArea file-name-display\">File: {fileName}</span>\n        <button\n          type=\"submit\"\n          className=\"upload\"\n          disabled={!file || isLoading || !account}\n        >\n          {isLoading ? \"Processing...\" : \"Verify & Upload\"}\n        </button>\n      </form>\n      {/* Message display (no changes needed here) */}\n      {message && (\n        <p\n          className={`upload-message ${\n            message.includes(\"Error\") ||\n            message.includes(\"⚠️\") ||\n            message.includes(\"❌\") ||\n            message.includes(\"🤔\")\n              ? \"error\"\n              : message.includes(\"✅\")\n              ? \"success\"\n              : \"info\"\n          }`}\n        >\n          {message}\n        </p>\n      )}\n       {/* Optional: Display calculated hash */}\n       {fileHash && <p className=\"hash-display\">File Hash: {fileHash.substring(0, 10)}...</p>}\n    </div>\n  );\n};\n\nexport default FileUpload;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}