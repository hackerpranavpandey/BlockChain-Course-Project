{"ast":null,"code":"var _jsxFileName = \"/home/pranav/Documents/Blockchain-Project/Blockchain-Project/Blockchain-Project/t/client/src/components/Display.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, useCallback, useEffect } from \"react\";\nimport \"./Display.css\"; // Make sure this CSS file exists\n\n// --- Hashing Helper (for ArrayBuffer) ---\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst calculateArrayBufferHash = async buffer => {\n  if (!buffer || buffer.byteLength === 0) {\n    throw new Error(\"Cannot hash empty or invalid buffer.\");\n  }\n  try {\n    const hashBuffer = await crypto.subtle.digest('SHA-256', buffer);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n    return hashHex;\n  } catch (error) {\n    console.error(\"Error during crypto.subtle.digest:\", error);\n    throw new Error(\"Hashing failed. Crypto API might not be available or input was invalid.\");\n  }\n};\n\n// --- URL Builder Helper ---\nconst buildDisplayUrl = cidOrUri => {\n  if (!cidOrUri || typeof cidOrUri !== 'string' || cidOrUri.trim().length === 0) {\n    console.warn(`Invalid input for buildDisplayUrl: ${cidOrUri}`);\n    return null;\n  }\n  // Use a reliable public gateway or your preferred one\n  const gateways = [\"https://gateway.pinata.cloud/ipfs/\",\n  // <<< USING PINATA AS DEFAULT AGAIN\n  \"https://ipfs.io/ipfs/\", \"https://cloudflare-ipfs.com/ipfs/\", \"https://dweb.link/ipfs/\"];\n  // <<< CHANGE INDEX TO 0 TO USE PINATA >>>\n  const gateway = gateways[0];\n  if (cidOrUri.startsWith('http://') || cidOrUri.startsWith('https://')) {\n    if (gateways.some(gw => cidOrUri.startsWith(gw))) {\n      return cidOrUri;\n    } else {\n      console.warn(`URL is HTTP(S) but not a recognized IPFS gateway: ${cidOrUri}`);\n      return cidOrUri; // Return anyway\n    }\n  } else if (cidOrUri.startsWith('ipfs://')) {\n    const cid = cidOrUri.substring(7);\n    return cid.length > 40 ? `${gateway}${cid}` : null;\n  } else if ((cidOrUri.startsWith('Qm') || cidOrUri.startsWith('b')) && cidOrUri.length > 40) {\n    console.log(`Identified CID: ${cidOrUri}, building URL with ${gateway}`);\n    return `${gateway}${cidOrUri}`;\n  } else {\n    console.warn(`Skipping unrecognized format for URL building: ${cidOrUri}`);\n    return null;\n  }\n};\n\n// --- Revised Component to Render Image or Video (WITH TRY VIDEO LOGIC) ---\nconst MediaRenderer = ({\n  url,\n  altText\n}) => {\n  _s();\n  const [mediaType, setMediaType] = useState('unknown'); // 'image', 'video', 'unknown'\n  const [tryVideo, setTryVideo] = useState(false); // Should we try video after image fail?\n  const [hasError, setHasError] = useState(false); // Final error state\n\n  // Effect to determine initial media type guess based on URL extension\n  useEffect(() => {\n    setHasError(false); // Reset error state when URL changes\n    setTryVideo(false); // Reset video attempt state when URL changes\n\n    if (!url) {\n      setMediaType('unknown');\n      setHasError(true); // Mark as error if URL is invalid\n      console.warn(\"MediaRenderer received invalid URL:\", url);\n      return;\n    }\n\n    // Simple regex to extract potential extension\n    const extensionMatch = url.match(/\\.([^.?#]+)(?:[?#]|$)/i);\n    const extension = extensionMatch ? extensionMatch[1].toLowerCase() : null;\n\n    // Common image/video extensions\n    const imageExtensions = ['png', 'jpg', 'jpeg', 'gif', 'webp', 'bmp', 'svg'];\n    const videoExtensions = ['mp4', 'webm', 'ogg', 'mov', 'avi', 'mkv', 'qt'];\n    if (imageExtensions.includes(extension)) {\n      setMediaType('image');\n      console.log(`Media type determined as 'image' for ${url}`);\n    } else if (videoExtensions.includes(extension)) {\n      setMediaType('video');\n      console.log(`Media type determined as 'video' for ${url}`);\n    } else {\n      // Default to unknown if no recognized extension\n      setMediaType('unknown');\n      console.log(`Media type 'unknown' for ${url}, will try rendering as image first.`);\n    }\n  }, [url]); // Dependency array ensures this runs when the url prop changes\n\n  // Error handler for the <img> tag\n  const handleImageError = () => {\n    console.log(`>>> handleImageError called for URL: ${url}. Current mediaType: ${mediaType}, hasError: ${hasError}, tryVideo: ${tryVideo}`); // DEBUG LOG\n\n    // If the type was 'unknown' and we haven't already encountered an error\n    if (mediaType === 'unknown' && !hasError) {\n      // Check !hasError to prevent loops if video also fails\n      console.warn(`Image attempt failed for unknown type: ${url}. Setting flag to try video render.`);\n      setTryVideo(true); // Trigger attempt to render as video in the next render cycle\n    } else {\n      // If it was definitely supposed to be an image or if video already failed, show final error\n      console.warn(`Failed to load image from: ${url}. Setting final error state.`);\n      setHasError(true);\n    }\n  };\n\n  // Error handler for the <video> tag\n  const handleVideoError = () => {\n    // If video fails (either directly guessed or after image fail), show final error\n    console.warn(`Failed to load video from: ${url}. Setting final error state.`);\n    setHasError(true);\n  };\n\n  // --- Conditional Rendering Logic ---\n\n  // 1. Final Error State: If any loading attempt resulted in an error\n  if (hasError) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"media-fallback error\",\n      children: [\"\\u26A0\\uFE0F Error loading media.\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: url,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"Open Link\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this);\n  }\n\n  // 2. Render Video: If type is 'video' OR if type was 'unknown' and we are now trying video\n  if (mediaType === 'video' || tryVideo) {\n    console.log(`Rendering <video> for ${url} (mediaType: ${mediaType}, tryVideo: ${tryVideo})`); // Log video render attempt\n    return /*#__PURE__*/_jsxDEV(\"video\", {\n      // Unique key helps React update DOM correctly\n      src: url,\n      controls: true // Show browser's default video controls\n      ,\n      preload: \"metadata\" // Suggest browser load only metadata initially\n      ,\n      className: \"media-item video-item\" // Apply specific video styles\n      ,\n      onError: handleVideoError // Attach video-specific error handler\n      ,\n      children: [\"Your browser does not support the video tag.\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: url,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"Download video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)]\n    }, url + '-video', true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this);\n  }\n\n  // 3. Render Image: If type is 'image' OR if type is 'unknown' and we haven't failed image yet (haven't set tryVideo)\n  if (mediaType === 'image' || mediaType === 'unknown' && !tryVideo) {\n    console.log(`Rendering <img> for ${url} (mediaType: ${mediaType}, tryVideo: ${tryVideo})`); // Log image render attempt\n    return /*#__PURE__*/_jsxDEV(\"img\", {\n      // Unique key\n      src: url,\n      alt: altText,\n      className: \"media-item image-list-item\" // Apply image styles\n      ,\n      onError: handleImageError // Attach image-specific error handler\n      ,\n      loading: \"lazy\" // Suggest lazy loading for images\n    }, url + '-image', false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this);\n  }\n\n  // 4. Default/Loading Fallback: Should ideally not be reached long\n  console.log(`Rendering initial loading fallback for ${url}`);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"media-fallback\",\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 10\n  }, this);\n};\n\n// --- Main Display Component ---\n_s(MediaRenderer, \"/n0JtVkqEnvb8bspR6pNFeGXlpA=\");\n_c = MediaRenderer;\nconst Display = ({\n  contract,\n  account\n}) => {\n  _s2();\n  const [displayData, setDisplayData] = useState([]); // Stores { id, cid, hash, displayUrl }\n  const [message, setMessage] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [verificationStatus, setVerificationStatus] = useState({});\n\n  // --- getdata Function ---\n  const getdata = async () => {\n    setDisplayData([]); // Clear previous data\n    setMessage(\"\"); // Clear previous message\n    setLoading(true); // Set loading state\n    setVerificationStatus({}); // Clear verification statuses\n\n    const otherAddressInput = document.querySelector(\".address\");\n    const otherAddress = otherAddressInput === null || otherAddressInput === void 0 ? void 0 : otherAddressInput.value.trim();\n    let addressToQuery = otherAddress || account; // Use input address or connected account\n\n    // --- Validations ---\n    if (!contract) {\n      setMessage(\"Error: Contract not loaded yet.\");\n      setLoading(false);\n      return;\n    }\n    if (!addressToQuery) {\n      setMessage(\"Error: No address specified or connected.\");\n      setLoading(false);\n      return;\n    }\n    // Validate address format\n    if (!/^0x[a-fA-F0-9]{40}$/.test(addressToQuery)) {\n      setMessage(\"Error: Invalid Ethereum address format provided.\");\n      setLoading(false);\n      return;\n    }\n    // Normalize address to lowercase for consistency\n    addressToQuery = addressToQuery.toLowerCase();\n    try {\n      setMessage(`Fetching content for ${addressToQuery.substring(0, 6)}...${addressToQuery.substring(addressToQuery.length - 4)}`);\n      console.log(`Fetching data for address: ${addressToQuery}`);\n\n      // --- Call the Smart Contract ---\n      const result = await contract.display(addressToQuery);\n      console.log(\"Raw contract result:\", result);\n\n      // --- Validate Contract Result Structure (Expecting [[cids], [hashes]]) ---\n      if (!Array.isArray(result) || result.length !== 2 || !Array.isArray(result[0]) || !Array.isArray(result[1])) {\n        console.error(\"Unexpected data structure returned from contract:\", result);\n        let errorDetail = \"Contract did not return the expected structure [[string], [string]].\";\n        if (result === null || typeof result !== 'object') {\n          errorDetail = `Contract returned non-array data: ${result}`;\n        }\n        throw new Error(`${errorDetail} Check contract logic or address permissions.`);\n      }\n      const cidsArray = result[0];\n      const hashesArray = result[1];\n\n      // Check for mismatched array lengths\n      if (cidsArray.length !== hashesArray.length) {\n        console.error(\"Mismatched lengths between CIDs and Hashes arrays:\", cidsArray.length, hashesArray.length);\n        throw new Error(\"Contract returned mismatched CID and Hash data.\");\n      }\n\n      // --- Process Fetched Data ---\n      if (cidsArray.length === 0) {\n        setMessage(`No content data found for address ${addressToQuery.substring(0, 6)}...`);\n        setDisplayData([]);\n      } else {\n        const processedData = [];\n        const initialStatus = {}; // To store initial verification state for each item\n\n        for (let i = 0; i < cidsArray.length; i++) {\n          const cid = cidsArray[i];\n          const hash = hashesArray[i];\n          // Generate display URL using the helper (now defaults to Pinata)\n          const displayUrl = buildDisplayUrl(cid);\n\n          // --- Add Log to check generated URL ---\n          console.log(`Processing Item ${i}: CID='${cid}', Hash='${hash}', Generated URL='${displayUrl}'`);\n\n          // Ensure both URL and hash are reasonably valid before adding\n          if (displayUrl && typeof hash === 'string' && hash.length > 10) {\n            // Basic check\n            // Use the generated URL as a unique key/ID for React state.\n            const uniqueId = displayUrl;\n            processedData.push({\n              id: uniqueId,\n              // Use URL as ID\n              cid: cid,\n              hash: hash,\n              displayUrl: displayUrl\n            });\n            initialStatus[uniqueId] = 'idle'; // Default verification status\n          } else {\n            console.warn(`Skipping item ${i}: Invalid URL ('${displayUrl}') or Hash ('${hash}') derived from CID '${cid}'`);\n          }\n        }\n\n        // Update component state only if valid data was processed\n        if (processedData.length > 0) {\n          console.log(\"Setting display data:\", processedData);\n          setDisplayData(processedData);\n          setVerificationStatus(initialStatus); // Set initial statuses\n          setMessage(\"\"); // Clear loading/status message\n        } else {\n          // If no valid items were processed after filtering\n          setDisplayData([]);\n          setMessage(`No processable content URLs/hashes found for address ${addressToQuery.substring(0, 6)}...`);\n        }\n      }\n    } catch (e) {\n      var _e$data, _e$error;\n      // --- Error Handling ---\n      console.error(\"Error during getdata execution:\", e);\n      let specificError = e.message || \"An unknown error occurred.\";\n      // Extract more specific errors if available\n      if (e.reason) {\n        specificError = e.reason;\n      } else if ((_e$data = e.data) !== null && _e$data !== void 0 && _e$data.message) {\n        specificError = e.data.message;\n      } else if ((_e$error = e.error) !== null && _e$error !== void 0 && _e$error.message) {\n        specificError = e.error.message;\n      }\n      setMessage(`Error fetching data: ${specificError}. Please check the address and network.`);\n      setDisplayData([]); // Clear data on error\n    } finally {\n      setLoading(false); // Ensure loading indicator is turned off\n    }\n  };\n\n  // --- verifyHash Function (Handles fetching content and comparing hash) ---\n  const verifyHash = useCallback(async (imageUrl, expectedHash, itemId) => {\n    // Basic argument validation\n    if (!imageUrl || !expectedHash || !itemId) {\n      console.error(\"Missing arguments for verifyHash\", {\n        imageUrl,\n        expectedHash,\n        itemId\n      });\n      setVerificationStatus(prev => ({\n        ...prev,\n        [itemId]: 'error'\n      }));\n      return;\n    }\n\n    // Update status to 'verifying'\n    setVerificationStatus(prev => ({\n      ...prev,\n      [itemId]: 'verifying'\n    }));\n    try {\n      console.log(`Verifying: Fetching content from ${imageUrl}`);\n      // Fetch the content from the IPFS gateway URL\n      const response = await fetch(imageUrl);\n\n      // Check if the fetch was successful\n      if (!response.ok) {\n        // Throw error with status text if fetch failed\n        throw new Error(`Fetch failed: ${response.status} ${response.statusText}`);\n      }\n\n      // Get the content as an ArrayBuffer\n      const fileBuffer = await response.arrayBuffer();\n      console.log(`Verifying: Calculating hash for item ${itemId} (${fileBuffer.byteLength} bytes)`);\n\n      // Calculate the SHA-256 hash of the fetched content\n      const calculatedHash = await calculateArrayBufferHash(fileBuffer);\n      console.log(`Verifying: Calculated hash ${calculatedHash} for item ${itemId}`);\n\n      // Compare calculated hash with the expected hash (case-insensitive)\n      if (calculatedHash.toLowerCase() === expectedHash.toLowerCase()) {\n        // If hashes match, update status to 'verified'\n        setVerificationStatus(prev => ({\n          ...prev,\n          [itemId]: 'verified'\n        }));\n        console.log(`✅ Verification SUCCESS for ${itemId}`);\n      } else {\n        // If hashes don't match, update status to 'mismatch'\n        setVerificationStatus(prev => ({\n          ...prev,\n          [itemId]: 'mismatch'\n        }));\n        console.warn(`❌ Verification FAILED for ${itemId}: Hash mismatch! Expected: ${expectedHash}, Calculated: ${calculatedHash}`);\n      }\n    } catch (error) {\n      // If any error occurs during fetch or hashing, update status to 'error'\n      console.error(`❌ Verification ERROR for ${itemId}:`, error);\n      setVerificationStatus(prev => ({\n        ...prev,\n        [itemId]: 'error'\n      }));\n    }\n  }, []); // useCallback with empty dependency array\n\n  // --- getStatusInfo Function (Provides text/class for status display) ---\n  const getStatusInfo = status => {\n    switch (status) {\n      case 'verifying':\n        return {\n          text: 'Verifying...',\n          class: 'status-verifying'\n        };\n      case 'verified':\n        return {\n          text: '✅ Verified',\n          class: 'status-verified'\n        };\n      case 'mismatch':\n        return {\n          text: '❌ Mismatch',\n          class: 'status-mismatch'\n        };\n      case 'error':\n        return {\n          text: '⚠️ Error',\n          class: 'status-error'\n        };\n      // Adjusted text slightly\n      case 'idle':\n      default:\n        return {\n          text: 'Not Verified',\n          class: 'status-idle'\n        };\n    }\n  };\n\n  // --- Component Return JSX ---\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: `status-message ${message.startsWith('Error') ? 'error' : ''}`,\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 19\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"loading-indicator\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-list\",\n      children: [\" \", displayData.map(item => {\n        var _item$cid, _item$hash;\n        // Get current verification status for this item\n        const statusInfo = getStatusInfo(verificationStatus[item.id]);\n        return (\n          /*#__PURE__*/\n          // Container for each item (media + info + verification)\n          _jsxDEV(\"div\", {\n            className: \"image-item-container\",\n            children: [/*#__PURE__*/_jsxDEV(MediaRenderer, {\n              url: item.displayUrl,\n              altText: `IPFS file: ${(_item$cid = item.cid) === null || _item$cid === void 0 ? void 0 : _item$cid.substring(0, 10)}...`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 376,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"image-hash\",\n              title: item.hash,\n              children: [\"Hash: \", (_item$hash = item.hash) === null || _item$hash === void 0 ? void 0 : _item$hash.substring(0, 10), \"...\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 381,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"verification-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: `verification-status ${statusInfo.class}`,\n                children: statusInfo.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 387,\n                columnNumber: 17\n              }, this), (statusInfo.class === 'status-idle' || statusInfo.class === 'status-mismatch' || statusInfo.class === 'status-error') && /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"verify-button\"\n                // Call verifyHash when button is clicked\n                ,\n                onClick: () => verifyHash(item.displayUrl, item.hash, item.id)\n                // Disable button while loading data or if this item is being verified\n                ,\n                disabled: loading || verificationStatus[item.id] === 'verifying',\n                children: \"Verify Hash\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 392,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 385,\n              columnNumber: 15\n            }, this)]\n          }, item.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 13\n          }, this)\n        );\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter Address (Optional)\",\n        className: \"address\",\n        disabled: loading // Disable input while loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"center button\" // Keep 'center' if needed by CSS\n        ,\n        onClick: getdata // Trigger data fetching\n        // Disable button if contract isn't loaded or if loading data\n        ,\n        disabled: !contract || loading,\n        children: loading ? \"Loading...\" : \"Get Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s2(Display, \"PNsTf5w1qIECnEVf462mcMTnDoo=\");\n_c2 = Display;\nexport default Display;\nvar _c, _c2;\n$RefreshReg$(_c, \"MediaRenderer\");\n$RefreshReg$(_c2, \"Display\");","map":{"version":3,"names":["useState","useCallback","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","calculateArrayBufferHash","buffer","byteLength","Error","hashBuffer","crypto","subtle","digest","hashArray","Array","from","Uint8Array","hashHex","map","b","toString","padStart","join","error","console","buildDisplayUrl","cidOrUri","trim","length","warn","gateways","gateway","startsWith","some","gw","cid","substring","log","MediaRenderer","url","altText","_s","mediaType","setMediaType","tryVideo","setTryVideo","hasError","setHasError","extensionMatch","match","extension","toLowerCase","imageExtensions","videoExtensions","includes","handleImageError","handleVideoError","className","children","href","target","rel","fileName","_jsxFileName","lineNumber","columnNumber","src","controls","preload","onError","alt","loading","_c","Display","contract","account","_s2","displayData","setDisplayData","message","setMessage","setLoading","verificationStatus","setVerificationStatus","getdata","otherAddressInput","document","querySelector","otherAddress","value","addressToQuery","test","result","display","isArray","errorDetail","cidsArray","hashesArray","processedData","initialStatus","i","hash","displayUrl","uniqueId","push","id","e","_e$data","_e$error","specificError","reason","data","verifyHash","imageUrl","expectedHash","itemId","prev","response","fetch","ok","status","statusText","fileBuffer","arrayBuffer","calculatedHash","getStatusInfo","text","class","item","_item$cid","_item$hash","statusInfo","title","onClick","disabled","type","placeholder","_c2","$RefreshReg$"],"sources":["/home/pranav/Documents/Blockchain-Project/Blockchain-Project/Blockchain-Project/t/client/src/components/Display.js"],"sourcesContent":["import { useState, useCallback, useEffect } from \"react\";\nimport \"./Display.css\"; // Make sure this CSS file exists\n\n// --- Hashing Helper (for ArrayBuffer) ---\nconst calculateArrayBufferHash = async (buffer) => {\n  if (!buffer || buffer.byteLength === 0) {\n    throw new Error(\"Cannot hash empty or invalid buffer.\");\n  }\n  try {\n    const hashBuffer = await crypto.subtle.digest('SHA-256', buffer);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n    return hashHex;\n  } catch (error) {\n     console.error(\"Error during crypto.subtle.digest:\", error);\n     throw new Error(\"Hashing failed. Crypto API might not be available or input was invalid.\");\n  }\n};\n\n// --- URL Builder Helper ---\nconst buildDisplayUrl = (cidOrUri) => {\n    if (!cidOrUri || typeof cidOrUri !== 'string' || cidOrUri.trim().length === 0) {\n        console.warn(`Invalid input for buildDisplayUrl: ${cidOrUri}`);\n        return null;\n    }\n    // Use a reliable public gateway or your preferred one\n    const gateways = [\n        \"https://gateway.pinata.cloud/ipfs/\", // <<< USING PINATA AS DEFAULT AGAIN\n        \"https://ipfs.io/ipfs/\",\n        \"https://cloudflare-ipfs.com/ipfs/\",\n        \"https://dweb.link/ipfs/\",\n    ];\n    // <<< CHANGE INDEX TO 0 TO USE PINATA >>>\n    const gateway = gateways[0];\n\n    if (cidOrUri.startsWith('http://') || cidOrUri.startsWith('https://')) {\n        if (gateways.some(gw => cidOrUri.startsWith(gw))) {\n             return cidOrUri;\n        } else {\n            console.warn(`URL is HTTP(S) but not a recognized IPFS gateway: ${cidOrUri}`);\n             return cidOrUri; // Return anyway\n        }\n    }\n    else if (cidOrUri.startsWith('ipfs://')) {\n        const cid = cidOrUri.substring(7);\n        return cid.length > 40 ? `${gateway}${cid}` : null;\n    }\n    else if ((cidOrUri.startsWith('Qm') || cidOrUri.startsWith('b')) && cidOrUri.length > 40) {\n         console.log(`Identified CID: ${cidOrUri}, building URL with ${gateway}`);\n         return `${gateway}${cidOrUri}`;\n    }\n    else {\n        console.warn(`Skipping unrecognized format for URL building: ${cidOrUri}`);\n        return null;\n    }\n};\n\n\n// --- Revised Component to Render Image or Video (WITH TRY VIDEO LOGIC) ---\nconst MediaRenderer = ({ url, altText }) => {\n  const [mediaType, setMediaType] = useState('unknown'); // 'image', 'video', 'unknown'\n  const [tryVideo, setTryVideo] = useState(false);       // Should we try video after image fail?\n  const [hasError, setHasError] = useState(false);       // Final error state\n\n  // Effect to determine initial media type guess based on URL extension\n  useEffect(() => {\n    setHasError(false); // Reset error state when URL changes\n    setTryVideo(false); // Reset video attempt state when URL changes\n\n    if (!url) {\n        setMediaType('unknown');\n        setHasError(true); // Mark as error if URL is invalid\n        console.warn(\"MediaRenderer received invalid URL:\", url)\n        return;\n    }\n\n    // Simple regex to extract potential extension\n    const extensionMatch = url.match(/\\.([^.?#]+)(?:[?#]|$)/i);\n    const extension = extensionMatch ? extensionMatch[1].toLowerCase() : null;\n\n    // Common image/video extensions\n    const imageExtensions = ['png', 'jpg', 'jpeg', 'gif', 'webp', 'bmp', 'svg'];\n    const videoExtensions = ['mp4', 'webm', 'ogg', 'mov', 'avi', 'mkv', 'qt'];\n\n    if (imageExtensions.includes(extension)) {\n      setMediaType('image');\n      console.log(`Media type determined as 'image' for ${url}`);\n    } else if (videoExtensions.includes(extension)) {\n      setMediaType('video');\n      console.log(`Media type determined as 'video' for ${url}`);\n    } else {\n      // Default to unknown if no recognized extension\n      setMediaType('unknown');\n      console.log(`Media type 'unknown' for ${url}, will try rendering as image first.`);\n    }\n  }, [url]); // Dependency array ensures this runs when the url prop changes\n\n  // Error handler for the <img> tag\n  const handleImageError = () => {\n    console.log(`>>> handleImageError called for URL: ${url}. Current mediaType: ${mediaType}, hasError: ${hasError}, tryVideo: ${tryVideo}`); // DEBUG LOG\n\n    // If the type was 'unknown' and we haven't already encountered an error\n    if (mediaType === 'unknown' && !hasError) { // Check !hasError to prevent loops if video also fails\n      console.warn(`Image attempt failed for unknown type: ${url}. Setting flag to try video render.`);\n      setTryVideo(true); // Trigger attempt to render as video in the next render cycle\n    } else {\n      // If it was definitely supposed to be an image or if video already failed, show final error\n      console.warn(`Failed to load image from: ${url}. Setting final error state.`);\n      setHasError(true);\n    }\n  };\n\n  // Error handler for the <video> tag\n  const handleVideoError = () => {\n    // If video fails (either directly guessed or after image fail), show final error\n    console.warn(`Failed to load video from: ${url}. Setting final error state.`);\n    setHasError(true);\n  };\n\n  // --- Conditional Rendering Logic ---\n\n  // 1. Final Error State: If any loading attempt resulted in an error\n  if (hasError) {\n    return (\n      <div className=\"media-fallback error\">\n        ⚠️ Error loading media.{\" \"}\n        <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">Open Link</a>\n      </div>\n    );\n  }\n\n  // 2. Render Video: If type is 'video' OR if type was 'unknown' and we are now trying video\n  if (mediaType === 'video' || tryVideo) {\n     console.log(`Rendering <video> for ${url} (mediaType: ${mediaType}, tryVideo: ${tryVideo})`); // Log video render attempt\n    return (\n      <video\n        key={url + '-video'} // Unique key helps React update DOM correctly\n        src={url}\n        controls // Show browser's default video controls\n        preload=\"metadata\" // Suggest browser load only metadata initially\n        className=\"media-item video-item\" // Apply specific video styles\n        onError={handleVideoError} // Attach video-specific error handler\n      >\n        {/* Fallback content if browser doesn't support <video> tag */}\n        Your browser does not support the video tag.{\" \"}\n        <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">Download video</a>\n      </video>\n    );\n  }\n\n // 3. Render Image: If type is 'image' OR if type is 'unknown' and we haven't failed image yet (haven't set tryVideo)\n  if (mediaType === 'image' || (mediaType === 'unknown' && !tryVideo)) {\n    console.log(`Rendering <img> for ${url} (mediaType: ${mediaType}, tryVideo: ${tryVideo})`); // Log image render attempt\n    return (\n      <img\n        key={url + '-image'} // Unique key\n        src={url}\n        alt={altText}\n        className=\"media-item image-list-item\" // Apply image styles\n        onError={handleImageError} // Attach image-specific error handler\n        loading=\"lazy\" // Suggest lazy loading for images\n      />\n    );\n  }\n\n  // 4. Default/Loading Fallback: Should ideally not be reached long\n  console.log(`Rendering initial loading fallback for ${url}`);\n  return <div className=\"media-fallback\">Loading...</div>;\n};\n\n\n// --- Main Display Component ---\nconst Display = ({ contract, account }) => {\n  const [displayData, setDisplayData] = useState([]); // Stores { id, cid, hash, displayUrl }\n  const [message, setMessage] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [verificationStatus, setVerificationStatus] = useState({});\n\n  // --- getdata Function ---\n   const getdata = async () => {\n    setDisplayData([]); // Clear previous data\n    setMessage(\"\");     // Clear previous message\n    setLoading(true);   // Set loading state\n    setVerificationStatus({}); // Clear verification statuses\n\n    const otherAddressInput = document.querySelector(\".address\");\n    const otherAddress = otherAddressInput?.value.trim();\n    let addressToQuery = otherAddress || account; // Use input address or connected account\n\n    // --- Validations ---\n    if (!contract) {\n       setMessage(\"Error: Contract not loaded yet.\");\n       setLoading(false);\n       return;\n    }\n     if (!addressToQuery) {\n       setMessage(\"Error: No address specified or connected.\");\n       setLoading(false);\n       return;\n    }\n     // Validate address format\n    if (!/^0x[a-fA-F0-9]{40}$/.test(addressToQuery)) {\n       setMessage(\"Error: Invalid Ethereum address format provided.\");\n       setLoading(false);\n       return;\n    }\n     // Normalize address to lowercase for consistency\n     addressToQuery = addressToQuery.toLowerCase();\n\n    try {\n        setMessage(`Fetching content for ${addressToQuery.substring(0,6)}...${addressToQuery.substring(addressToQuery.length-4)}`);\n        console.log(`Fetching data for address: ${addressToQuery}`);\n\n        // --- Call the Smart Contract ---\n        const result = await contract.display(addressToQuery);\n        console.log(\"Raw contract result:\", result);\n\n        // --- Validate Contract Result Structure (Expecting [[cids], [hashes]]) ---\n        if (!Array.isArray(result) || result.length !== 2 || !Array.isArray(result[0]) || !Array.isArray(result[1])) {\n            console.error(\"Unexpected data structure returned from contract:\", result);\n             let errorDetail = \"Contract did not return the expected structure [[string], [string]].\";\n             if (result === null || typeof result !== 'object') {\n                 errorDetail = `Contract returned non-array data: ${result}`;\n             }\n             throw new Error(`${errorDetail} Check contract logic or address permissions.`);\n        }\n\n        const cidsArray = result[0];\n        const hashesArray = result[1];\n\n        // Check for mismatched array lengths\n        if (cidsArray.length !== hashesArray.length) {\n            console.error(\"Mismatched lengths between CIDs and Hashes arrays:\", cidsArray.length, hashesArray.length);\n            throw new Error(\"Contract returned mismatched CID and Hash data.\");\n        }\n\n        // --- Process Fetched Data ---\n        if (cidsArray.length === 0) {\n            setMessage(`No content data found for address ${addressToQuery.substring(0,6)}...`);\n            setDisplayData([]);\n        } else {\n            const processedData = [];\n            const initialStatus = {}; // To store initial verification state for each item\n\n            for (let i = 0; i < cidsArray.length; i++) {\n                const cid = cidsArray[i];\n                const hash = hashesArray[i];\n                // Generate display URL using the helper (now defaults to Pinata)\n                const displayUrl = buildDisplayUrl(cid);\n\n                // --- Add Log to check generated URL ---\n                console.log(`Processing Item ${i}: CID='${cid}', Hash='${hash}', Generated URL='${displayUrl}'`);\n\n                // Ensure both URL and hash are reasonably valid before adding\n                if (displayUrl && typeof hash === 'string' && hash.length > 10) { // Basic check\n                    // Use the generated URL as a unique key/ID for React state.\n                    const uniqueId = displayUrl;\n                    processedData.push({\n                        id: uniqueId, // Use URL as ID\n                        cid: cid,\n                        hash: hash,\n                        displayUrl: displayUrl\n                    });\n                    initialStatus[uniqueId] = 'idle'; // Default verification status\n                } else {\n                    console.warn(`Skipping item ${i}: Invalid URL ('${displayUrl}') or Hash ('${hash}') derived from CID '${cid}'`);\n                }\n            }\n\n            // Update component state only if valid data was processed\n            if (processedData.length > 0) {\n                console.log(\"Setting display data:\", processedData);\n                setDisplayData(processedData);\n                setVerificationStatus(initialStatus); // Set initial statuses\n                setMessage(\"\"); // Clear loading/status message\n            } else {\n                // If no valid items were processed after filtering\n                setDisplayData([]);\n                setMessage(`No processable content URLs/hashes found for address ${addressToQuery.substring(0,6)}...`);\n            }\n        }\n    } catch (e) {\n        // --- Error Handling ---\n        console.error(\"Error during getdata execution:\", e);\n        let specificError = e.message || \"An unknown error occurred.\";\n        // Extract more specific errors if available\n        if (e.reason) { specificError = e.reason; }\n        else if (e.data?.message) { specificError = e.data.message; }\n        else if (e.error?.message) { specificError = e.error.message; }\n        setMessage(`Error fetching data: ${specificError}. Please check the address and network.`);\n        setDisplayData([]); // Clear data on error\n    } finally {\n       setLoading(false); // Ensure loading indicator is turned off\n    }\n};\n\n\n  // --- verifyHash Function (Handles fetching content and comparing hash) ---\n  const verifyHash = useCallback(async (imageUrl, expectedHash, itemId) => {\n    // Basic argument validation\n    if (!imageUrl || !expectedHash || !itemId) {\n        console.error(\"Missing arguments for verifyHash\", { imageUrl, expectedHash, itemId });\n        setVerificationStatus(prev => ({ ...prev, [itemId]: 'error' }));\n        return;\n    }\n\n    // Update status to 'verifying'\n    setVerificationStatus(prev => ({ ...prev, [itemId]: 'verifying' }));\n\n    try {\n        console.log(`Verifying: Fetching content from ${imageUrl}`);\n        // Fetch the content from the IPFS gateway URL\n        const response = await fetch(imageUrl);\n\n        // Check if the fetch was successful\n        if (!response.ok) {\n            // Throw error with status text if fetch failed\n            throw new Error(`Fetch failed: ${response.status} ${response.statusText}`);\n        }\n\n        // Get the content as an ArrayBuffer\n        const fileBuffer = await response.arrayBuffer();\n        console.log(`Verifying: Calculating hash for item ${itemId} (${fileBuffer.byteLength} bytes)`);\n\n        // Calculate the SHA-256 hash of the fetched content\n        const calculatedHash = await calculateArrayBufferHash(fileBuffer);\n        console.log(`Verifying: Calculated hash ${calculatedHash} for item ${itemId}`);\n\n        // Compare calculated hash with the expected hash (case-insensitive)\n        if (calculatedHash.toLowerCase() === expectedHash.toLowerCase()) {\n            // If hashes match, update status to 'verified'\n            setVerificationStatus(prev => ({ ...prev, [itemId]: 'verified' }));\n            console.log(`✅ Verification SUCCESS for ${itemId}`);\n        } else {\n            // If hashes don't match, update status to 'mismatch'\n            setVerificationStatus(prev => ({ ...prev, [itemId]: 'mismatch' }));\n            console.warn(`❌ Verification FAILED for ${itemId}: Hash mismatch! Expected: ${expectedHash}, Calculated: ${calculatedHash}`);\n        }\n    } catch (error) {\n        // If any error occurs during fetch or hashing, update status to 'error'\n        console.error(`❌ Verification ERROR for ${itemId}:`, error);\n        setVerificationStatus(prev => ({ ...prev, [itemId]: 'error' }));\n    }\n  }, []); // useCallback with empty dependency array\n\n\n  // --- getStatusInfo Function (Provides text/class for status display) ---\n  const getStatusInfo = (status) => {\n    switch (status) {\n        case 'verifying': return { text: 'Verifying...', class: 'status-verifying' };\n        case 'verified': return { text: '✅ Verified', class: 'status-verified' };\n        case 'mismatch': return { text: '❌ Mismatch', class: 'status-mismatch' };\n        case 'error': return { text: '⚠️ Error', class: 'status-error' }; // Adjusted text slightly\n        case 'idle':\n        default: return { text: 'Not Verified', class: 'status-idle' };\n    }\n  };\n\n  // --- Component Return JSX ---\n  return (\n    <>\n      {/* Display Status/Error Messages */}\n      {message && <p className={`status-message ${message.startsWith('Error') ? 'error' : ''}`}>{message}</p>}\n      {/* Display Loading Indicator */}\n      {loading && <p className=\"loading-indicator\">Loading...</p>}\n\n      {/* Render List of Items */}\n      <div className=\"image-list\"> {/* Or rename to content-list */}\n        {displayData.map((item) => {\n          // Get current verification status for this item\n          const statusInfo = getStatusInfo(verificationStatus[item.id]);\n          return (\n            // Container for each item (media + info + verification)\n            <div className=\"image-item-container\" key={item.id}>\n              {/* Render Image or Video using the MediaRenderer component */}\n              <MediaRenderer\n                 url={item.displayUrl}\n                 altText={`IPFS file: ${item.cid?.substring(0, 10)}...`}\n              />\n              {/* Display truncated hash */}\n              <p className=\"image-hash\" title={item.hash}>\n                  Hash: {item.hash?.substring(0, 10)}...\n              </p>\n              {/* Verification Section */}\n              <div className=\"verification-section\">\n                {/* Display current verification status */}\n                <span className={`verification-status ${statusInfo.class}`}>\n                   {statusInfo.text}\n                </span>\n                {/* Show Verify button only if not already verified or currently verifying */}\n                {(statusInfo.class === 'status-idle' || statusInfo.class === 'status-mismatch' || statusInfo.class === 'status-error') && (\n                  <button\n                    className=\"verify-button\"\n                    // Call verifyHash when button is clicked\n                    onClick={() => verifyHash(item.displayUrl, item.hash, item.id)}\n                    // Disable button while loading data or if this item is being verified\n                    disabled={loading || verificationStatus[item.id] === 'verifying'}\n                  >\n                    Verify Hash\n                  </button>\n                )}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      {/* Input Controls */}\n      <div className=\"controls\">\n        <input\n            type=\"text\"\n            placeholder=\"Enter Address (Optional)\"\n            className=\"address\"\n            disabled={loading} // Disable input while loading\n          />\n          <p></p>\n          <button\n            className=\"center button\" // Keep 'center' if needed by CSS\n            onClick={getdata} // Trigger data fetching\n            // Disable button if contract isn't loaded or if loading data\n            disabled={!contract || loading}\n           >\n            {loading ? \"Loading...\" : \"Get Data\"}\n          </button>\n      </div>\n    </>\n  );\n};\n\nexport default Display;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}