{"ast":null,"code":"var _jsxFileName = \"/home/pranav/Documents/Blockchain-Project/Blockchain-Project/Blockchain-Project/t/client/src/components/Display.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, useCallback, useEffect } from \"react\"; // Import useEffect\nimport \"./Display.css\"; // Make sure this CSS file exists\n\n// --- Hashing Helper (for ArrayBuffer) ---\n// (Keep the calculateArrayBufferHash function as before)\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst calculateArrayBufferHash = async buffer => {\n  if (!buffer || buffer.byteLength === 0) {\n    throw new Error(\"Cannot hash empty or invalid buffer.\");\n  }\n  try {\n    const hashBuffer = await crypto.subtle.digest('SHA-256', buffer);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n    return hashHex;\n  } catch (error) {\n    console.error(\"Error during crypto.subtle.digest:\", error);\n    throw new Error(\"Hashing failed. Crypto API might not be available or input was invalid.\");\n  }\n};\n\n// --- URL Builder Helper ---\n// (Keep the buildDisplayUrl function as before)\nconst buildDisplayUrl = cidOrUri => {\n  if (!cidOrUri || typeof cidOrUri !== 'string' || cidOrUri.trim().length === 0) {\n    console.warn(`Invalid input for buildDisplayUrl: ${cidOrUri}`);\n    return null;\n  }\n  // Use a reliable public gateway or your preferred one\n  const gateways = [\"https://gateway.pinata.cloud/ipfs/\", \"https://ipfs.io/ipfs/\", \"https://cloudflare-ipfs.com/ipfs/\"\n  // Add others if needed\n  ];\n  const gateway = gateways[0]; // Choose the primary gateway\n\n  if (cidOrUri.startsWith('http://') || cidOrUri.startsWith('https://')) {\n    // Check if it's already a gateway URL we recognize\n    if (gateways.some(gw => cidOrUri.startsWith(gw))) {\n      return cidOrUri; // It's already a usable gateway URL\n    } else {\n      console.warn(`URL is HTTP(S) but not a recognized IPFS gateway: ${cidOrUri}`);\n      // Optionally return it anyway if it might be directly accessible\n      return cidOrUri;\n      // return null; // Or treat non-gateway URLs as invalid\n    }\n  } else if (cidOrUri.startsWith('ipfs://')) {\n    const cid = cidOrUri.substring(7);\n    return cid.length > 40 ? `${gateway}${cid}` : null; // Basic CID check\n  } else if ((cidOrUri.startsWith('Qm') || cidOrUri.startsWith('b')) && cidOrUri.length > 40) {\n    return `${gateway}${cidOrUri}`; // Assume it's a CID\n  } else {\n    console.warn(`Skipping unrecognized format for URL building: ${cidOrUri}`);\n    return null;\n  }\n};\n\n// --- New Component to Render Image or Video ---\nconst MediaRenderer = ({\n  url,\n  altText\n}) => {\n  _s();\n  const [mediaType, setMediaType] = useState('unknown'); // 'image', 'video', 'unknown', 'error'\n  const [hasError, setHasError] = useState(false);\n\n  // Guess media type based on URL extension (heuristic)\n  useEffect(() => {\n    setHasError(false); // Reset error on URL change\n    const extensionMatch = url.match(/\\.([^.?#]+)(?:[?#]|$)/i);\n    const extension = extensionMatch ? extensionMatch[1].toLowerCase() : null;\n    if (['png', 'jpg', 'jpeg', 'gif', 'webp', 'bmp', 'svg'].includes(extension)) {\n      setMediaType('image');\n    } else if (['mp4', 'webm', 'ogg', 'mov', 'avi', 'mkv', 'qt'].includes(extension)) {\n      setMediaType('video');\n    } else {\n      // If no extension, maybe try fetching HEAD later, or default to image/unknown\n      // For simplicity now, default to 'unknown', which will try image first\n      setMediaType('unknown');\n      console.log(`Media type unknown for ${url}, will try image first.`);\n    }\n  }, [url]); // Re-run when URL changes\n\n  const handleError = () => {\n    console.warn(`Failed to load media (${mediaType}) from: ${url}`);\n    setHasError(true); // Mark this item as having an error\n  };\n\n  // Render based on determined type or error state\n  if (hasError) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"media-fallback error\",\n      children: [\"\\u26A0\\uFE0F Error loading media.\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: url,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"Open Link\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this);\n  }\n  if (mediaType === 'image' || mediaType === 'unknown') {\n    // Try image for unknown type\n    return /*#__PURE__*/_jsxDEV(\"img\", {\n      src: url,\n      alt: altText,\n      className: \"media-item image-list-item\" // Keep original class if needed\n      ,\n      onError: handleError // Use the shared error handler\n      ,\n      loading: \"lazy\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this);\n  }\n  if (mediaType === 'video') {\n    return /*#__PURE__*/_jsxDEV(\"video\", {\n      src: url,\n      controls: true // Add controls for playback\n      ,\n      preload: \"metadata\" // Load only metadata initially for performance\n      ,\n      className: \"media-item video-item\",\n      onError: handleError // Use the shared error handler\n      // Optionally add width/height constraints via CSS or attributes\n      ,\n      children: [\"Your browser does not support the video tag.\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: url,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"Download video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Should not be reached if logic is correct, but good fallback\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"media-fallback\",\n    children: \"Loading media...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 10\n  }, this);\n};\n\n// --- Main Display Component ---\n_s(MediaRenderer, \"VomW6GVbmJVh5ts3nQoREl7ort0=\");\n_c = MediaRenderer;\nconst Display = ({\n  contract,\n  account\n}) => {\n  _s2();\n  const [displayData, setDisplayData] = useState([]); // Stores { id, cid, hash, displayUrl }\n  const [message, setMessage] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [verificationStatus, setVerificationStatus] = useState({});\n\n  // --- getdata Function (Mostly unchanged, ensure it sets displayData correctly) ---\n  const getdata = async () => {\n    setDisplayData([]);\n    setMessage(\"\");\n    setLoading(true);\n    setVerificationStatus({});\n    const otherAddressInput = document.querySelector(\".address\");\n    const otherAddress = otherAddressInput === null || otherAddressInput === void 0 ? void 0 : otherAddressInput.value.trim();\n    let addressToQuery = otherAddress || account; // Use provided address or connected account\n\n    // Basic Address Validation (Optional but recommended)\n    if (!addressToQuery) {\n      setMessage(\"Error: No address specified or connected.\");\n      setLoading(false);\n      return;\n    }\n    // Simple check for Ethereum-like address format\n    if (!/^0x[a-fA-F0-9]{40}$/.test(addressToQuery)) {\n      setMessage(\"Error: Invalid address format provided.\");\n      setLoading(false);\n      return;\n    }\n    // Normalize address (checksum doesn't matter for comparison/lookup usually)\n    addressToQuery = addressToQuery.toLowerCase();\n    try {\n      setMessage(`Fetching content for ${addressToQuery.substring(0, 6)}...${addressToQuery.substring(addressToQuery.length - 4)}`);\n      console.log(`Fetching data for address: ${addressToQuery}`);\n\n      // --- Call the contract ---\n      const result = await contract.display(addressToQuery);\n      console.log(\"Raw contract result:\", result);\n\n      // --- Validate Contract Result Structure ---\n      // Expecting [[cids], [hashes]]\n      if (!Array.isArray(result) || result.length !== 2 || !Array.isArray(result[0]) || !Array.isArray(result[1])) {\n        console.error(\"Unexpected data structure returned from contract:\", result);\n        // Try to provide more context if possible\n        if (result === null || typeof result !== 'object') {\n          throw new Error(`Contract returned non-array data: ${result}`);\n        } else {\n          throw new Error(\"Contract did not return the expected structure [[string], [string]]. Check contract logic or address permissions.\");\n        }\n      }\n      const cidsArray = result[0];\n      const hashesArray = result[1];\n\n      // Check for mismatched lengths\n      if (cidsArray.length !== hashesArray.length) {\n        console.error(\"Mismatched lengths between CIDs and Hashes arrays:\", cidsArray.length, hashesArray.length);\n        throw new Error(\"Contract returned mismatched CID and Hash data.\");\n      }\n\n      // --- Process the data ---\n      if (cidsArray.length === 0) {\n        setMessage(`No content data found for address ${addressToQuery.substring(0, 6)}...`);\n        setDisplayData([]); // Ensure data is cleared\n      } else {\n        const processedData = [];\n        const initialStatus = {};\n        for (let i = 0; i < cidsArray.length; i++) {\n          const cid = cidsArray[i];\n          const hash = hashesArray[i];\n          const displayUrl = buildDisplayUrl(cid); // Build URL using helper\n\n          // Ensure both URL and hash are valid before adding\n          if (displayUrl && typeof hash === 'string' && hash.length > 10) {\n            // Basic hash check\n            const uniqueId = cid || hash; // Use CID if available, otherwise hash\n            processedData.push({\n              id: uniqueId,\n              cid: cid,\n              hash: hash,\n              displayUrl: displayUrl\n            });\n            initialStatus[uniqueId] = 'idle'; // Initial verification status\n          } else {\n            console.warn(`Skipping item ${i}: Invalid URL ('${displayUrl}') or Hash ('${hash}') derived from CID '${cid}'`);\n          }\n        }\n\n        // Update state only if valid data was processed\n        if (processedData.length > 0) {\n          setDisplayData(processedData);\n          setVerificationStatus(initialStatus);\n          setMessage(\"\"); // Clear loading message\n        } else {\n          setDisplayData([]); // Clear data if nothing valid was processed\n          setMessage(`No processable content URLs/hashes found for address ${addressToQuery.substring(0, 6)}...`);\n        }\n      }\n    } catch (e) {\n      var _e$data, _e$error;\n      console.error(\"Error during getdata execution:\", e);\n      // Provide more specific error feedback\n      let specificError = e.message || \"An unknown error occurred.\";\n      if (e.reason) {\n        // Blockchain revert reason\n        specificError = e.reason;\n      } else if ((_e$data = e.data) !== null && _e$data !== void 0 && _e$data.message) {\n        // Error message from RPC provider/contract\n        specificError = e.data.message;\n      } else if ((_e$error = e.error) !== null && _e$error !== void 0 && _e$error.message) {\n        // Another common error structure\n        specificError = e.error.message;\n      }\n      setMessage(`Error fetching data: ${specificError}. Please check the address and network.`);\n      setDisplayData([]); // Clear data on error\n    } finally {\n      setLoading(false); // Stop loading indicator\n    }\n  };\n\n  // --- verifyHash Function (Unchanged) ---\n  const verifyHash = useCallback(async (imageUrl, expectedHash, itemId) => {\n    if (!imageUrl || !expectedHash || !itemId) {\n      console.error(\"Missing arguments for verifyHash\");\n      setVerificationStatus(prev => ({\n        ...prev,\n        [itemId]: 'error'\n      }));\n      return;\n    }\n    setVerificationStatus(prev => ({\n      ...prev,\n      [itemId]: 'verifying'\n    }));\n    try {\n      console.log(`Verifying: Fetching ${imageUrl}`);\n      const response = await fetch(imageUrl);\n      if (!response.ok) {\n        throw new Error(`Fetch failed: ${response.status} ${response.statusText}`);\n      }\n      const fileBuffer = await response.arrayBuffer(); // Renamed variable\n      console.log(`Verifying: Calculating hash for item ${itemId} (${fileBuffer.byteLength} bytes)`);\n      const calculatedHash = await calculateArrayBufferHash(fileBuffer); // Use correct variable\n      console.log(`Verifying: Calculated hash ${calculatedHash} for item ${itemId}`);\n      if (calculatedHash.toLowerCase() === expectedHash.toLowerCase()) {\n        setVerificationStatus(prev => ({\n          ...prev,\n          [itemId]: 'verified'\n        }));\n        console.log(`✅ Verification SUCCESS for ${itemId}`);\n      } else {\n        setVerificationStatus(prev => ({\n          ...prev,\n          [itemId]: 'mismatch'\n        }));\n        console.warn(`❌ Verification FAILED for ${itemId}: Hash mismatch! Expected: ${expectedHash}, Calculated: ${calculatedHash}`);\n      }\n    } catch (error) {\n      console.error(`❌ Verification ERROR for ${itemId}:`, error);\n      setVerificationStatus(prev => ({\n        ...prev,\n        [itemId]: 'error'\n      }));\n    }\n  }, []); // Keep useCallback with empty dependency array\n\n  // --- getStatusInfo Function (Unchanged) ---\n  const getStatusInfo = status => {\n    switch (status) {\n      case 'verifying':\n        return {\n          text: 'Verifying...',\n          class: 'status-verifying'\n        };\n      case 'verified':\n        return {\n          text: '✅ Verified',\n          class: 'status-verified'\n        };\n      case 'mismatch':\n        return {\n          text: '❌ Mismatch',\n          class: 'status-mismatch'\n        };\n      case 'error':\n        return {\n          text: '⚠️ Error',\n          class: 'status-error'\n        };\n      case 'idle':\n      default:\n        return {\n          text: 'Not Verified',\n          class: 'status-idle'\n        };\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: `status-message ${message.startsWith('Error') ? 'error' : ''}`,\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 19\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"loading-indicator\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-list\",\n      children: [\" \", displayData.map(item => {\n        var _item$cid, _item$hash;\n        const statusInfo = getStatusInfo(verificationStatus[item.id]);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-item-container\",\n          children: [/*#__PURE__*/_jsxDEV(MediaRenderer, {\n            url: item.displayUrl,\n            altText: `IPFS file: ${(_item$cid = item.cid) === null || _item$cid === void 0 ? void 0 : _item$cid.substring(0, 10)}...`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"image-hash\",\n            title: item.hash,\n            children: [\"Hash: \", (_item$hash = item.hash) === null || _item$hash === void 0 ? void 0 : _item$hash.substring(0, 10), \"...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"verification-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: `verification-status ${statusInfo.class}`,\n              children: statusInfo.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 17\n            }, this), (statusInfo.class === 'status-idle' || statusInfo.class === 'status-mismatch' || statusInfo.class === 'status-error') && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"verify-button\",\n              onClick: () => verifyHash(item.displayUrl, item.hash, item.id),\n              disabled: loading || verificationStatus[item.id] === 'verifying',\n              children: \"Verify\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 15\n          }, this)]\n        }, item.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter Address (Optional)\",\n        className: \"address\",\n        disabled: loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"center button\",\n        onClick: getdata,\n        disabled: !contract || loading,\n        children: loading ? \"Loading...\" : \"Get Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s2(Display, \"PNsTf5w1qIECnEVf462mcMTnDoo=\");\n_c2 = Display;\nexport default Display;\nvar _c, _c2;\n$RefreshReg$(_c, \"MediaRenderer\");\n$RefreshReg$(_c2, \"Display\");","map":{"version":3,"names":["useState","useCallback","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","calculateArrayBufferHash","buffer","byteLength","Error","hashBuffer","crypto","subtle","digest","hashArray","Array","from","Uint8Array","hashHex","map","b","toString","padStart","join","error","console","buildDisplayUrl","cidOrUri","trim","length","warn","gateways","gateway","startsWith","some","gw","cid","substring","MediaRenderer","url","altText","_s","mediaType","setMediaType","hasError","setHasError","extensionMatch","match","extension","toLowerCase","includes","log","handleError","className","children","href","target","rel","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","onError","loading","controls","preload","_c","Display","contract","account","_s2","displayData","setDisplayData","message","setMessage","setLoading","verificationStatus","setVerificationStatus","getdata","otherAddressInput","document","querySelector","otherAddress","value","addressToQuery","test","result","display","isArray","cidsArray","hashesArray","processedData","initialStatus","i","hash","displayUrl","uniqueId","push","id","e","_e$data","_e$error","specificError","reason","data","verifyHash","imageUrl","expectedHash","itemId","prev","response","fetch","ok","status","statusText","fileBuffer","arrayBuffer","calculatedHash","getStatusInfo","text","class","item","_item$cid","_item$hash","statusInfo","title","onClick","disabled","type","placeholder","_c2","$RefreshReg$"],"sources":["/home/pranav/Documents/Blockchain-Project/Blockchain-Project/Blockchain-Project/t/client/src/components/Display.js"],"sourcesContent":["import { useState, useCallback, useEffect } from \"react\"; // Import useEffect\nimport \"./Display.css\"; // Make sure this CSS file exists\n\n// --- Hashing Helper (for ArrayBuffer) ---\n// (Keep the calculateArrayBufferHash function as before)\nconst calculateArrayBufferHash = async (buffer) => {\n  if (!buffer || buffer.byteLength === 0) {\n    throw new Error(\"Cannot hash empty or invalid buffer.\");\n  }\n  try {\n    const hashBuffer = await crypto.subtle.digest('SHA-256', buffer);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n    return hashHex;\n  } catch (error) {\n     console.error(\"Error during crypto.subtle.digest:\", error);\n     throw new Error(\"Hashing failed. Crypto API might not be available or input was invalid.\");\n  }\n};\n\n\n// --- URL Builder Helper ---\n// (Keep the buildDisplayUrl function as before)\nconst buildDisplayUrl = (cidOrUri) => {\n    if (!cidOrUri || typeof cidOrUri !== 'string' || cidOrUri.trim().length === 0) {\n        console.warn(`Invalid input for buildDisplayUrl: ${cidOrUri}`);\n        return null;\n    }\n    // Use a reliable public gateway or your preferred one\n    const gateways = [\n        \"https://gateway.pinata.cloud/ipfs/\",\n        \"https://ipfs.io/ipfs/\",\n        \"https://cloudflare-ipfs.com/ipfs/\"\n        // Add others if needed\n    ];\n    const gateway = gateways[0]; // Choose the primary gateway\n\n    if (cidOrUri.startsWith('http://') || cidOrUri.startsWith('https://')) {\n        // Check if it's already a gateway URL we recognize\n        if (gateways.some(gw => cidOrUri.startsWith(gw))) {\n             return cidOrUri; // It's already a usable gateway URL\n        } else {\n            console.warn(`URL is HTTP(S) but not a recognized IPFS gateway: ${cidOrUri}`);\n            // Optionally return it anyway if it might be directly accessible\n             return cidOrUri;\n            // return null; // Or treat non-gateway URLs as invalid\n        }\n    }\n    else if (cidOrUri.startsWith('ipfs://')) {\n        const cid = cidOrUri.substring(7);\n        return cid.length > 40 ? `${gateway}${cid}` : null; // Basic CID check\n    }\n    else if ((cidOrUri.startsWith('Qm') || cidOrUri.startsWith('b')) && cidOrUri.length > 40) {\n         return `${gateway}${cidOrUri}`; // Assume it's a CID\n    }\n    else {\n        console.warn(`Skipping unrecognized format for URL building: ${cidOrUri}`);\n        return null;\n    }\n};\n\n\n// --- New Component to Render Image or Video ---\nconst MediaRenderer = ({ url, altText }) => {\n  const [mediaType, setMediaType] = useState('unknown'); // 'image', 'video', 'unknown', 'error'\n  const [hasError, setHasError] = useState(false);\n\n  // Guess media type based on URL extension (heuristic)\n  useEffect(() => {\n    setHasError(false); // Reset error on URL change\n    const extensionMatch = url.match(/\\.([^.?#]+)(?:[?#]|$)/i);\n    const extension = extensionMatch ? extensionMatch[1].toLowerCase() : null;\n\n    if (['png', 'jpg', 'jpeg', 'gif', 'webp', 'bmp', 'svg'].includes(extension)) {\n      setMediaType('image');\n    } else if (['mp4', 'webm', 'ogg', 'mov', 'avi', 'mkv', 'qt'].includes(extension)) {\n      setMediaType('video');\n    } else {\n      // If no extension, maybe try fetching HEAD later, or default to image/unknown\n      // For simplicity now, default to 'unknown', which will try image first\n      setMediaType('unknown');\n      console.log(`Media type unknown for ${url}, will try image first.`);\n    }\n  }, [url]); // Re-run when URL changes\n\n  const handleError = () => {\n    console.warn(`Failed to load media (${mediaType}) from: ${url}`);\n    setHasError(true); // Mark this item as having an error\n  };\n\n  // Render based on determined type or error state\n  if (hasError) {\n    return (\n      <div className=\"media-fallback error\">\n        ⚠️ Error loading media.{\" \"}\n        <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">Open Link</a>\n      </div>\n    );\n  }\n\n  if (mediaType === 'image' || mediaType === 'unknown') { // Try image for unknown type\n    return (\n      <img\n        src={url}\n        alt={altText}\n        className=\"media-item image-list-item\" // Keep original class if needed\n        onError={handleError} // Use the shared error handler\n        loading=\"lazy\"\n      />\n    );\n  }\n\n  if (mediaType === 'video') {\n    return (\n      <video\n        src={url}\n        controls // Add controls for playback\n        preload=\"metadata\" // Load only metadata initially for performance\n        className=\"media-item video-item\"\n        onError={handleError} // Use the shared error handler\n        // Optionally add width/height constraints via CSS or attributes\n      >\n        Your browser does not support the video tag.{\" \"}\n        <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">Download video</a>\n      </video>\n    );\n  }\n\n  // Should not be reached if logic is correct, but good fallback\n  return <div className=\"media-fallback\">Loading media...</div>;\n};\n\n\n// --- Main Display Component ---\nconst Display = ({ contract, account }) => {\n  const [displayData, setDisplayData] = useState([]); // Stores { id, cid, hash, displayUrl }\n  const [message, setMessage] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [verificationStatus, setVerificationStatus] = useState({});\n\n  // --- getdata Function (Mostly unchanged, ensure it sets displayData correctly) ---\n   const getdata = async () => {\n    setDisplayData([]);\n    setMessage(\"\");\n    setLoading(true);\n    setVerificationStatus({});\n\n    const otherAddressInput = document.querySelector(\".address\");\n    const otherAddress = otherAddressInput?.value.trim();\n    let addressToQuery = otherAddress || account; // Use provided address or connected account\n\n    // Basic Address Validation (Optional but recommended)\n    if (!addressToQuery) {\n        setMessage(\"Error: No address specified or connected.\");\n        setLoading(false);\n        return;\n    }\n    // Simple check for Ethereum-like address format\n    if (!/^0x[a-fA-F0-9]{40}$/.test(addressToQuery)) {\n        setMessage(\"Error: Invalid address format provided.\");\n        setLoading(false);\n        return;\n    }\n     // Normalize address (checksum doesn't matter for comparison/lookup usually)\n     addressToQuery = addressToQuery.toLowerCase();\n\n\n    try {\n        setMessage(`Fetching content for ${addressToQuery.substring(0,6)}...${addressToQuery.substring(addressToQuery.length-4)}`);\n        console.log(`Fetching data for address: ${addressToQuery}`);\n\n        // --- Call the contract ---\n        const result = await contract.display(addressToQuery);\n        console.log(\"Raw contract result:\", result);\n\n        // --- Validate Contract Result Structure ---\n        // Expecting [[cids], [hashes]]\n        if (!Array.isArray(result) || result.length !== 2 || !Array.isArray(result[0]) || !Array.isArray(result[1])) {\n            console.error(\"Unexpected data structure returned from contract:\", result);\n            // Try to provide more context if possible\n             if (result === null || typeof result !== 'object') {\n                 throw new Error(`Contract returned non-array data: ${result}`);\n             } else {\n                 throw new Error(\"Contract did not return the expected structure [[string], [string]]. Check contract logic or address permissions.\");\n             }\n        }\n\n        const cidsArray = result[0];\n        const hashesArray = result[1];\n\n        // Check for mismatched lengths\n        if (cidsArray.length !== hashesArray.length) {\n            console.error(\"Mismatched lengths between CIDs and Hashes arrays:\", cidsArray.length, hashesArray.length);\n            throw new Error(\"Contract returned mismatched CID and Hash data.\");\n        }\n\n        // --- Process the data ---\n        if (cidsArray.length === 0) {\n            setMessage(`No content data found for address ${addressToQuery.substring(0,6)}...`);\n            setDisplayData([]); // Ensure data is cleared\n        } else {\n            const processedData = [];\n            const initialStatus = {};\n            for (let i = 0; i < cidsArray.length; i++) {\n                const cid = cidsArray[i];\n                const hash = hashesArray[i];\n                const displayUrl = buildDisplayUrl(cid); // Build URL using helper\n\n                // Ensure both URL and hash are valid before adding\n                if (displayUrl && typeof hash === 'string' && hash.length > 10) { // Basic hash check\n                    const uniqueId = cid || hash; // Use CID if available, otherwise hash\n                    processedData.push({\n                        id: uniqueId,\n                        cid: cid,\n                        hash: hash,\n                        displayUrl: displayUrl\n                    });\n                    initialStatus[uniqueId] = 'idle'; // Initial verification status\n                } else {\n                    console.warn(`Skipping item ${i}: Invalid URL ('${displayUrl}') or Hash ('${hash}') derived from CID '${cid}'`);\n                }\n            }\n\n            // Update state only if valid data was processed\n            if (processedData.length > 0) {\n                setDisplayData(processedData);\n                setVerificationStatus(initialStatus);\n                setMessage(\"\"); // Clear loading message\n            } else {\n                setDisplayData([]); // Clear data if nothing valid was processed\n                setMessage(`No processable content URLs/hashes found for address ${addressToQuery.substring(0,6)}...`);\n            }\n        }\n    } catch (e) {\n        console.error(\"Error during getdata execution:\", e);\n        // Provide more specific error feedback\n        let specificError = e.message || \"An unknown error occurred.\";\n        if (e.reason) { // Blockchain revert reason\n            specificError = e.reason;\n        } else if (e.data?.message) { // Error message from RPC provider/contract\n            specificError = e.data.message;\n        } else if (e.error?.message) { // Another common error structure\n             specificError = e.error.message;\n        }\n        setMessage(`Error fetching data: ${specificError}. Please check the address and network.`);\n        setDisplayData([]); // Clear data on error\n    } finally {\n       setLoading(false); // Stop loading indicator\n    }\n};\n\n\n  // --- verifyHash Function (Unchanged) ---\n  const verifyHash = useCallback(async (imageUrl, expectedHash, itemId) => {\n    if (!imageUrl || !expectedHash || !itemId) {\n        console.error(\"Missing arguments for verifyHash\");\n        setVerificationStatus(prev => ({ ...prev, [itemId]: 'error' }));\n        return;\n    }\n\n    setVerificationStatus(prev => ({ ...prev, [itemId]: 'verifying' }));\n\n    try {\n        console.log(`Verifying: Fetching ${imageUrl}`);\n        const response = await fetch(imageUrl);\n\n        if (!response.ok) {\n            throw new Error(`Fetch failed: ${response.status} ${response.statusText}`);\n        }\n\n        const fileBuffer = await response.arrayBuffer(); // Renamed variable\n        console.log(`Verifying: Calculating hash for item ${itemId} (${fileBuffer.byteLength} bytes)`);\n\n        const calculatedHash = await calculateArrayBufferHash(fileBuffer); // Use correct variable\n        console.log(`Verifying: Calculated hash ${calculatedHash} for item ${itemId}`);\n\n        if (calculatedHash.toLowerCase() === expectedHash.toLowerCase()) {\n            setVerificationStatus(prev => ({ ...prev, [itemId]: 'verified' }));\n            console.log(`✅ Verification SUCCESS for ${itemId}`);\n        } else {\n            setVerificationStatus(prev => ({ ...prev, [itemId]: 'mismatch' }));\n            console.warn(`❌ Verification FAILED for ${itemId}: Hash mismatch! Expected: ${expectedHash}, Calculated: ${calculatedHash}`);\n        }\n    } catch (error) {\n        console.error(`❌ Verification ERROR for ${itemId}:`, error);\n        setVerificationStatus(prev => ({ ...prev, [itemId]: 'error' }));\n    }\n  }, []); // Keep useCallback with empty dependency array\n\n\n  // --- getStatusInfo Function (Unchanged) ---\n  const getStatusInfo = (status) => {\n    switch (status) {\n        case 'verifying': return { text: 'Verifying...', class: 'status-verifying' };\n        case 'verified': return { text: '✅ Verified', class: 'status-verified' };\n        case 'mismatch': return { text: '❌ Mismatch', class: 'status-mismatch' };\n        case 'error': return { text: '⚠️ Error', class: 'status-error' };\n        case 'idle':\n        default: return { text: 'Not Verified', class: 'status-idle' };\n    }\n  };\n\n  return (\n    <>\n      {/* Messages and Loading Indicator (Unchanged) */}\n      {message && <p className={`status-message ${message.startsWith('Error') ? 'error' : ''}`}>{message}</p>}\n      {loading && <p className=\"loading-indicator\">Loading...</p>}\n\n      {/* --- Render List using MediaRenderer --- */}\n      <div className=\"image-list\"> {/* Keep class name or rename to content-list */}\n        {displayData.map((item) => {\n          const statusInfo = getStatusInfo(verificationStatus[item.id]);\n          return (\n            <div className=\"image-item-container\" key={item.id}>\n              {/* Use MediaRenderer for image/video display */}\n              <MediaRenderer\n                 url={item.displayUrl}\n                 altText={`IPFS file: ${item.cid?.substring(0, 10)}...`}\n              />\n              {/* Hash and Verification Section (Unchanged) */}\n              <p className=\"image-hash\" title={item.hash}>\n                  Hash: {item.hash?.substring(0, 10)}...\n              </p>\n              <div className=\"verification-section\">\n                <span className={`verification-status ${statusInfo.class}`}>\n                   {statusInfo.text}\n                </span>\n                {(statusInfo.class === 'status-idle' || statusInfo.class === 'status-mismatch' || statusInfo.class === 'status-error') && (\n                  <button\n                    className=\"verify-button\"\n                    onClick={() => verifyHash(item.displayUrl, item.hash, item.id)}\n                    disabled={loading || verificationStatus[item.id] === 'verifying'}\n                  >\n                    Verify\n                  </button>\n                )}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      {/* Controls (Unchanged) */}\n      <div className=\"controls\">\n        <input\n            type=\"text\"\n            placeholder=\"Enter Address (Optional)\"\n            className=\"address\"\n            disabled={loading}\n          />\n          <button\n            className=\"center button\"\n            onClick={getdata}\n            disabled={!contract || loading}\n           >\n            {loading ? \"Loading...\" : \"Get Data\"}\n          </button>\n      </div>\n    </>\n  );\n};\n\nexport default Display;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}