{"ast":null,"code":"var _jsxFileName = \"/home/pranav/Documents/Blockchain-Project/Blockchain-Project/Blockchain-Project/t/client/src/components/Modal.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\"; // For address validation\nimport { toast } from \"react-toastify\"; // Assuming you use react-toastify\nimport \"./Modal.css\"; // Import your CSS file\n\n// Accept account prop from App.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Modal = ({\n  setModalOpen,\n  contract,\n  account\n}) => {\n  _s();\n  const [shareAddress, setShareAddress] = useState(\"\"); // Input field state\n  const [accessList, setAccessList] = useState([]); // Stores { address: string, hasAccess: bool }\n  const [isLoadingList, setIsLoadingList] = useState(false);\n  const [isSharing, setIsSharing] = useState(false);\n  const [shareError, setShareError] = useState(\"\");\n\n  // --- Fetch Access List ---\n  useEffect(() => {\n    const fetchAccessList = async () => {\n      // Ensure contract is loaded before attempting call\n      if (contract && account) {\n        // Also check if account is available\n        setIsLoadingList(true);\n        setAccessList([]); // Clear previous list\n        try {\n          // Call the contract function\n          const rawList = await contract.shareAccess(); // Returns array of Access structs\n          console.log(\"Fetched Raw Access List:\", rawList);\n\n          // Format the list for display\n          const formattedList = rawList.map(item => ({\n            address: item.user,\n            // Access struct field 'user'\n            hasAccess: item.access // Access struct field 'access'\n          }));\n          setAccessList(formattedList);\n        } catch (error) {\n          console.error(\"Error fetching access list:\", error);\n          toast.error(\"Could not fetch access list.\");\n          // Handle specific errors if needed\n        } finally {\n          setIsLoadingList(false);\n        }\n      }\n    };\n    fetchAccessList();\n  }, [contract, account]); // Re-run if contract or account changes\n\n  // --- Handle Sharing Action ---\n  const handleSharing = async () => {\n    setShareError(\"\"); // Clear previous errors\n\n    // 1. Validate Input Address Format\n    if (!ethers.utils.isAddress(shareAddress)) {\n      const errorMsg = \"Invalid Ethereum address format.\";\n      setShareError(errorMsg);\n      toast.error(errorMsg);\n      return;\n    }\n\n    // 2. Prevent Self-Sharing (using account prop)\n    const normalizedShareAddress = shareAddress.toLowerCase();\n    const normalizedAccount = account === null || account === void 0 ? void 0 : account.toLowerCase(); // Use optional chaining and normalize\n\n    if (!normalizedAccount) {\n      setShareError(\"Cannot verify sharing: Your account address is not available.\");\n      toast.error(\"Cannot verify sharing: Your account address is not available.\");\n      return;\n    }\n    if (normalizedShareAddress === normalizedAccount) {\n      const errorMsg = \"You cannot grant access to yourself.\";\n      setShareError(errorMsg);\n      toast.warn(errorMsg);\n      return;\n    }\n\n    // 3. Call Contract\n    if (contract) {\n      setIsSharing(true);\n      try {\n        console.log(`Attempting to grant access to: ${shareAddress}`);\n        const tx = await contract.allow(shareAddress);\n        toast.info(`Granting access... Tx: ${tx.hash.substring(0, 6)}...`);\n        await tx.wait(); // Wait for confirmation\n\n        toast.success(`Access granted to ${shareAddress.substring(0, 6)}...`);\n        setShareAddress(\"\"); // Clear input\n\n        // Refresh list after successful share\n        const newList = await contract.shareAccess();\n        const formattedList = newList.map(item => ({\n          address: item.user,\n          hasAccess: item.access\n        }));\n        setAccessList(formattedList);\n\n        // Optionally close modal automatically, or let user close it\n        // setModalOpen(false);\n      } catch (error) {\n        var _error$data, _error$data$message;\n        console.error(\"Error granting access:\", error);\n        let specificError = \"Failed to grant access.\";\n        // Extract more specific revert reasons\n        if (error.reason) {\n          specificError = error.reason;\n        } else if ((_error$data = error.data) !== null && _error$data !== void 0 && (_error$data$message = _error$data.message) !== null && _error$data$message !== void 0 && _error$data$message.includes(\"reverted with reason string\")) {\n          const match = error.data.message.match(/reverted with reason string '(.*?)'/);\n          if (match && match[1]) specificError = match[1];else specificError = \"Transaction reverted by contract.\";\n        } else if (error.code === 4001) {\n          specificError = \"Transaction rejected in MetaMask.\";\n        } else if (error.message) {\n          specificError = error.message;\n        }\n        setShareError(specificError);\n        toast.error(`Error: ${specificError}`);\n      } finally {\n        setIsSharing(false);\n      }\n    } else {\n      setShareError(\"Contract not available.\");\n      toast.error(\"Contract not available.\");\n    }\n  };\n  return (\n    /*#__PURE__*/\n    // Using class names corresponding to the modern CSS provided before\n    _jsxDEV(\"div\", {\n      className: \"modal-backdrop\",\n      onClick: () => !isSharing && setModalOpen(false),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-container\",\n        onClick: e => e.stopPropagation(),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Share Access\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"modal-close-button\",\n            onClick: () => setModalOpen(false),\n            disabled: isSharing,\n            children: \"\\xD7 \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"shareAddressInput\",\n            children: \"Share With (Address):\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"shareAddressInput\",\n            className: \"address-input\" // Use a class for styling\n            ,\n            placeholder: \"Enter Ethereum address (0x...)\",\n            value: shareAddress,\n            onChange: e => {\n              setShareAddress(e.target.value);\n              if (shareError) setShareError(\"\"); // Clear error on input change\n            },\n            disabled: isSharing\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 11\n          }, this), shareError && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"modal-error-message\",\n            children: shareError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 26\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"modal-action-button allow-button\" // Use specific classes\n            ,\n            onClick: handleSharing,\n            disabled: isSharing || !shareAddress || !ethers.utils.isAddress(shareAddress) // Basic validation disable\n            ,\n            children: isSharing ? \"Granting...\" : \"Grant Access\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"address-list\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"People With Access:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 13\n            }, this), isLoadingList ? /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Loading list...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 15\n            }, this) : accessList.length > 0 ? accessList.map(item =>\n            // Display only if access is currently true (optional)\n            item.hasAccess && /*#__PURE__*/_jsxDEV(\"p\", {\n              title: item.address,\n              children: [item.address.substring(0, 8), \"...\", item.address.substring(item.address.length - 6)]\n            }, item.address, true, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 21\n            }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"empty-list-placeholder\",\n              children: \"No addresses shared yet.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 15\n            }, this), !isLoadingList && accessList.length > 0 && !accessList.some(item => item.hasAccess) && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"empty-list-placeholder\",\n              children: \"No users currently have active access.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 18\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-footer\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button cancel-button\" // Use classes for styling\n            ,\n            onClick: () => setModalOpen(false),\n            disabled: isSharing,\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 14\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 10\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(Modal, \"09EVlHWnEUJ41Mi1TDV0UHbdkHo=\");\n_c = Modal;\nexport default Modal;\nvar _c;\n$RefreshReg$(_c, \"Modal\");","map":{"version":3,"names":["useState","useEffect","ethers","toast","jsxDEV","_jsxDEV","Modal","setModalOpen","contract","account","_s","shareAddress","setShareAddress","accessList","setAccessList","isLoadingList","setIsLoadingList","isSharing","setIsSharing","shareError","setShareError","fetchAccessList","rawList","shareAccess","console","log","formattedList","map","item","address","user","hasAccess","access","error","handleSharing","utils","isAddress","errorMsg","normalizedShareAddress","toLowerCase","normalizedAccount","warn","tx","allow","info","hash","substring","wait","success","newList","_error$data","_error$data$message","specificError","reason","data","message","includes","match","code","className","onClick","children","e","stopPropagation","fileName","_jsxFileName","lineNumber","columnNumber","disabled","htmlFor","type","id","placeholder","value","onChange","target","length","title","some","_c","$RefreshReg$"],"sources":["/home/pranav/Documents/Blockchain-Project/Blockchain-Project/Blockchain-Project/t/client/src/components/Modal.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\"; // For address validation\nimport { toast } from \"react-toastify\"; // Assuming you use react-toastify\nimport \"./Modal.css\"; // Import your CSS file\n\n// Accept account prop from App.js\nconst Modal = ({ setModalOpen, contract, account }) => {\n  const [shareAddress, setShareAddress] = useState(\"\"); // Input field state\n  const [accessList, setAccessList] = useState([]); // Stores { address: string, hasAccess: bool }\n  const [isLoadingList, setIsLoadingList] = useState(false);\n  const [isSharing, setIsSharing] = useState(false);\n  const [shareError, setShareError] = useState(\"\");\n\n  // --- Fetch Access List ---\n  useEffect(() => {\n    const fetchAccessList = async () => {\n      // Ensure contract is loaded before attempting call\n      if (contract && account) { // Also check if account is available\n        setIsLoadingList(true);\n        setAccessList([]); // Clear previous list\n        try {\n          // Call the contract function\n          const rawList = await contract.shareAccess(); // Returns array of Access structs\n          console.log(\"Fetched Raw Access List:\", rawList);\n\n          // Format the list for display\n          const formattedList = rawList.map(item => ({\n            address: item.user, // Access struct field 'user'\n            hasAccess: item.access // Access struct field 'access'\n          }));\n          setAccessList(formattedList);\n\n        } catch (error) {\n          console.error(\"Error fetching access list:\", error);\n          toast.error(\"Could not fetch access list.\");\n          // Handle specific errors if needed\n        } finally {\n          setIsLoadingList(false);\n        }\n      }\n    };\n\n    fetchAccessList();\n  }, [contract, account]); // Re-run if contract or account changes\n\n  // --- Handle Sharing Action ---\n  const handleSharing = async () => {\n    setShareError(\"\"); // Clear previous errors\n\n    // 1. Validate Input Address Format\n    if (!ethers.utils.isAddress(shareAddress)) {\n      const errorMsg = \"Invalid Ethereum address format.\";\n      setShareError(errorMsg);\n      toast.error(errorMsg);\n      return;\n    }\n\n    // 2. Prevent Self-Sharing (using account prop)\n    const normalizedShareAddress = shareAddress.toLowerCase();\n    const normalizedAccount = account?.toLowerCase(); // Use optional chaining and normalize\n\n    if (!normalizedAccount) {\n        setShareError(\"Cannot verify sharing: Your account address is not available.\");\n        toast.error(\"Cannot verify sharing: Your account address is not available.\");\n        return;\n    }\n\n    if (normalizedShareAddress === normalizedAccount) {\n      const errorMsg = \"You cannot grant access to yourself.\";\n      setShareError(errorMsg);\n      toast.warn(errorMsg);\n      return;\n    }\n\n    // 3. Call Contract\n    if (contract) {\n      setIsSharing(true);\n      try {\n        console.log(`Attempting to grant access to: ${shareAddress}`);\n        const tx = await contract.allow(shareAddress);\n        toast.info(`Granting access... Tx: ${tx.hash.substring(0, 6)}...`);\n\n        await tx.wait(); // Wait for confirmation\n\n        toast.success(`Access granted to ${shareAddress.substring(0, 6)}...`);\n        setShareAddress(\"\"); // Clear input\n\n        // Refresh list after successful share\n        const newList = await contract.shareAccess();\n        const formattedList = newList.map(item => ({ address: item.user, hasAccess: item.access }));\n        setAccessList(formattedList);\n\n        // Optionally close modal automatically, or let user close it\n        // setModalOpen(false);\n\n      } catch (error) {\n        console.error(\"Error granting access:\", error);\n        let specificError = \"Failed to grant access.\";\n        // Extract more specific revert reasons\n        if (error.reason) {\n          specificError = error.reason;\n        } else if (error.data?.message?.includes(\"reverted with reason string\")) {\n            const match = error.data.message.match(/reverted with reason string '(.*?)'/);\n            if (match && match[1]) specificError = match[1];\n            else specificError = \"Transaction reverted by contract.\";\n        } else if (error.code === 4001) {\n            specificError = \"Transaction rejected in MetaMask.\";\n        } else if (error.message) {\n            specificError = error.message;\n        }\n        setShareError(specificError);\n        toast.error(`Error: ${specificError}`);\n      } finally {\n        setIsSharing(false);\n      }\n    } else {\n      setShareError(\"Contract not available.\");\n      toast.error(\"Contract not available.\");\n    }\n  };\n\n  return (\n    // Using class names corresponding to the modern CSS provided before\n    <div className=\"modal-backdrop\" onClick={() => !isSharing && setModalOpen(false)}>\n      <div className=\"modal-container\" onClick={(e) => e.stopPropagation()}>\n\n        <div className=\"modal-header\">\n          <h2>Share Access</h2>\n          <button\n            className=\"modal-close-button\"\n            onClick={() => setModalOpen(false)}\n            disabled={isSharing}\n          >\n            × {/* Close symbol */}\n          </button>\n        </div>\n\n        <div className=\"modal-body\">\n          {/* Input */}\n          <label htmlFor=\"shareAddressInput\">Share With (Address):</label>\n          <input\n            type=\"text\"\n            id=\"shareAddressInput\"\n            className=\"address-input\" // Use a class for styling\n            placeholder=\"Enter Ethereum address (0x...)\"\n            value={shareAddress}\n            onChange={(e) => {\n              setShareAddress(e.target.value);\n              if (shareError) setShareError(\"\"); // Clear error on input change\n            }}\n            disabled={isSharing}\n          />\n\n          {/* Error Display */}\n          {shareError && <p className=\"modal-error-message\">{shareError}</p>}\n\n          {/* Share Button */}\n          <button\n            className=\"modal-action-button allow-button\" // Use specific classes\n            onClick={handleSharing}\n            disabled={isSharing || !shareAddress || !ethers.utils.isAddress(shareAddress)} // Basic validation disable\n          >\n            {isSharing ? \"Granting...\" : \"Grant Access\"}\n          </button>\n\n          {/* Access List Display */}\n          <div className=\"address-list\">\n            <h3>People With Access:</h3>\n            {isLoadingList ? (\n              <p>Loading list...</p>\n            ) : accessList.length > 0 ? (\n              accessList.map((item) => (\n                 // Display only if access is currently true (optional)\n                 item.hasAccess && (\n                    <p key={item.address} title={item.address}>\n                      {item.address.substring(0, 8)}...{item.address.substring(item.address.length - 6)}\n                      {/* You could add a revoke button here later */}\n                    </p>\n                 )\n              ))\n            ) : (\n              <p className=\"empty-list-placeholder\">No addresses shared yet.</p>\n            )}\n            {/* Filtered message if some had access revoked */}\n            {!isLoadingList && accessList.length > 0 && !accessList.some(item => item.hasAccess) && (\n                 <p className=\"empty-list-placeholder\">No users currently have active access.</p>\n            )}\n          </div>\n        </div>\n\n         {/* Footer with Cancel Button */}\n         <div className=\"modal-footer\">\n             <button\n                className=\"button cancel-button\" // Use classes for styling\n                onClick={() => setModalOpen(false)}\n                disabled={isSharing}\n             >\n                Close\n             </button>\n         </div>\n\n      </div>\n    </div>\n  );\n};\n\nexport default Modal;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}