{"ast":null,"code":"var _jsxFileName = \"/home/pranav/Documents/Blockchain-Project/Blockchain-Project/Blockchain-Project/t/client/src/App.js\",\n  _s = $RefreshSig$();\nimport Upload from \"./artifacts/contracts/Upload.sol/Upload.json\";\nimport { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport FileUpload from \"./components/FileUpload\";\nimport Display from \"./components/Display\";\nimport Modal from \"./components/Modal\";\nimport Notification from \"./components/Notification\"; // Assuming this is for toast notifications etc.\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [account, setAccount] = useState(\"\");\n  const [contract, setContract] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(true); // Added loading state for initial connection\n  const [network, setNetwork] = useState(null); // State to store network name\n\n  useEffect(() => {\n    const connectWallet = async () => {\n      setIsLoading(true); // Start loading\n      // Check if MetaMask is installed\n      if (window.ethereum) {\n        try {\n          const provider = new ethers.providers.Web3Provider(window.ethereum);\n          setProvider(provider);\n\n          // Listeners for network/account changes\n          window.ethereum.on(\"chainChanged\", _chainId => window.location.reload());\n          window.ethereum.on(\"accountsChanged\", _accounts => window.location.reload()); // Reload forces re-connection\n\n          // Request accounts\n          await provider.send(\"eth_requestAccounts\", []);\n          const signer = provider.getSigner();\n          const address = await signer.getAddress();\n          setAccount(address);\n\n          // Get network info\n          const networkData = await provider.getNetwork();\n          setNetwork(networkData.name === \"unknown\" ? `Localhost (${networkData.chainId})` : networkData.name);\n\n          // Instantiate contract\n          // IMPORTANT: Replace with your DEPLOYED contract address\n          const contractAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\"; // Address for Hardhat Network node\n          // const contractAddress = \"YOUR_SEPOLIA_DEPLOYED_ADDRESS\"; // Example for Sepolia\n\n          const contractInstance = new ethers.Contract(contractAddress, Upload.abi, signer);\n          setContract(contractInstance);\n          console.log(\"Contract Instance:\", contractInstance);\n        } catch (error) {\n          console.error(\"Error connecting to Metamask:\", error);\n          // Handle specific errors, e.g., user rejection\n          if (error.code === 4001) {\n            console.log(\"User rejected connection request.\");\n          }\n        } finally {\n          setIsLoading(false); // Stop loading regardless of outcome\n        }\n      } else {\n        console.error(\"Metamask is not installed or not detected.\");\n        alert(\"MetaMask not detected. Please install it to use this application.\");\n        setIsLoading(false);\n      }\n    };\n    connectWallet();\n\n    // Cleanup listeners on component unmount (optional but good practice)\n    return () => {\n      var _window$ethereum;\n      if ((_window$ethereum = window.ethereum) !== null && _window$ethereum !== void 0 && _window$ethereum.removeListener) {\n        window.ethereum.removeListener(\"chainChanged\", () => window.location.reload());\n        window.ethereum.removeListener(\"accountsChanged\", () => window.location.reload());\n      }\n    };\n  }, []); // Empty dependency array ensures this runs only once on mount\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [modalOpen && /*#__PURE__*/_jsxDEV(Modal, {\n      setModalOpen: setModalOpen,\n      contract: contract\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"app-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header-title\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Secure Media Hub\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 14\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"subtitle\",\n            children: \"Deepfake Detection & Decentralized Storage\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 14\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header-controls\",\n          children: [isLoading ? /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"connection-status loading\",\n            children: \"Connecting...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 17\n          }, this) : account ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"connection-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"account-address\",\n              title: account,\n              children: [\"Connected: \", account.substring(0, 6), \"...\", account.substring(account.length - 4)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"network-name\",\n              children: [\"Network: \", network || 'Loading...']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"connection-status disconnected\",\n            children: \"Not Connected\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 17\n          }, this), account && !modalOpen && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button share-button\",\n            onClick: () => setModalOpen(true),\n            children: \"Share Access\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 16\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"app-main\",\n        children: account && contract ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(FileUpload, {\n            account: account,\n            provider: provider,\n            contract: contract\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Display, {\n            contract: contract,\n            account: account\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : !isLoading ?\n        /*#__PURE__*/\n        // Message when not connected (and not loading)\n        _jsxDEV(\"div\", {\n          className: \"connect-prompt\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Please connect your MetaMask wallet to use the application.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"(Ensure you are on the correct network where the contract is deployed.)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this) :\n        // Optional: Could show a loading spinner here too\n        null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Notification, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"1CRCRr+fEC/Fqqop9eVFckDhaas=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Upload","useState","useEffect","ethers","FileUpload","Display","Modal","Notification","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","account","setAccount","contract","setContract","provider","setProvider","modalOpen","setModalOpen","isLoading","setIsLoading","network","setNetwork","connectWallet","window","ethereum","providers","Web3Provider","on","_chainId","location","reload","_accounts","send","signer","getSigner","address","getAddress","networkData","getNetwork","name","chainId","contractAddress","contractInstance","Contract","abi","console","log","error","code","alert","_window$ethereum","removeListener","children","fileName","_jsxFileName","lineNumber","columnNumber","className","title","substring","length","onClick","_c","$RefreshReg$"],"sources":["/home/pranav/Documents/Blockchain-Project/Blockchain-Project/Blockchain-Project/t/client/src/App.js"],"sourcesContent":["import Upload from \"./artifacts/contracts/Upload.sol/Upload.json\";\nimport { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport FileUpload from \"./components/FileUpload\";\nimport Display from \"./components/Display\";\nimport Modal from \"./components/Modal\";\nimport Notification from \"./components/Notification\"; // Assuming this is for toast notifications etc.\nimport \"./App.css\";\n\nfunction App() {\n  const [account, setAccount] = useState(\"\");\n  const [contract, setContract] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(true); // Added loading state for initial connection\n  const [network, setNetwork] = useState(null); // State to store network name\n\n  useEffect(() => {\n    const connectWallet = async () => {\n      setIsLoading(true); // Start loading\n      // Check if MetaMask is installed\n      if (window.ethereum) {\n        try {\n          const provider = new ethers.providers.Web3Provider(window.ethereum);\n          setProvider(provider);\n\n          // Listeners for network/account changes\n          window.ethereum.on(\"chainChanged\", (_chainId) => window.location.reload());\n          window.ethereum.on(\"accountsChanged\", (_accounts) => window.location.reload()); // Reload forces re-connection\n\n          // Request accounts\n          await provider.send(\"eth_requestAccounts\", []);\n          const signer = provider.getSigner();\n          const address = await signer.getAddress();\n          setAccount(address);\n\n          // Get network info\n          const networkData = await provider.getNetwork();\n          setNetwork(networkData.name === \"unknown\" ? `Localhost (${networkData.chainId})` : networkData.name);\n\n          // Instantiate contract\n          // IMPORTANT: Replace with your DEPLOYED contract address\n          const contractAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\"; // Address for Hardhat Network node\n          // const contractAddress = \"YOUR_SEPOLIA_DEPLOYED_ADDRESS\"; // Example for Sepolia\n\n          const contractInstance = new ethers.Contract(\n            contractAddress,\n            Upload.abi,\n            signer\n          );\n          setContract(contractInstance);\n          console.log(\"Contract Instance:\", contractInstance);\n\n        } catch (error) {\n          console.error(\"Error connecting to Metamask:\", error);\n          // Handle specific errors, e.g., user rejection\n          if (error.code === 4001) {\n            console.log(\"User rejected connection request.\");\n          }\n        } finally {\n          setIsLoading(false); // Stop loading regardless of outcome\n        }\n      } else {\n        console.error(\"Metamask is not installed or not detected.\");\n        alert(\"MetaMask not detected. Please install it to use this application.\");\n        setIsLoading(false);\n      }\n    };\n\n    connectWallet();\n\n    // Cleanup listeners on component unmount (optional but good practice)\n    return () => {\n        if (window.ethereum?.removeListener) {\n            window.ethereum.removeListener(\"chainChanged\", () => window.location.reload());\n            window.ethereum.removeListener(\"accountsChanged\", () => window.location.reload());\n        }\n    };\n\n  }, []); // Empty dependency array ensures this runs only once on mount\n\n  return (\n    <>\n      {/* Modal remains outside the main layout */}\n      {modalOpen && (\n        <Modal setModalOpen={setModalOpen} contract={contract}></Modal>\n      )}\n\n      {/* Main Application Container */}\n      <div className=\"app-container\">\n        {/* Header Section */}\n        <header className=\"app-header\">\n          <div className=\"header-title\">\n             <h1>Secure Media Hub</h1> {/* More descriptive title */}\n             <span className=\"subtitle\">Deepfake Detection & Decentralized Storage</span>\n          </div>\n          <div className=\"header-controls\">\n             {isLoading ? (\n                <span className=\"connection-status loading\">Connecting...</span>\n             ) : account ? (\n                <div className=\"connection-info\">\n                    <span className=\"account-address\" title={account}>\n                        Connected: {account.substring(0, 6)}...{account.substring(account.length - 4)}\n                    </span>\n                    <span className=\"network-name\">\n                        Network: {network || 'Loading...'}\n                    </span>\n                </div>\n             ) : (\n                <span className=\"connection-status disconnected\">Not Connected</span>\n             )}\n             {/* Conditionally render Share button only if connected */}\n             {account && !modalOpen && (\n               <button className=\"button share-button\" onClick={() => setModalOpen(true)}>\n                 Share Access\n               </button>\n             )}\n          </div>\n        </header>\n\n        {/* Main Content Area */}\n        <main className=\"app-main\">\n          {/* Show components only when connected */}\n          {account && contract ? (\n            <>\n              <FileUpload\n                account={account}\n                provider={provider}\n                contract={contract}\n              />\n              <Display contract={contract} account={account} />\n            </>\n          ) : !isLoading ? (\n            // Message when not connected (and not loading)\n            <div className=\"connect-prompt\">\n              <h2>Please connect your MetaMask wallet to use the application.</h2>\n              <p>(Ensure you are on the correct network where the contract is deployed.)</p>\n              {/* Optionally add a connect button if needed, though useEffect handles it */}\n            </div>\n          ) : (\n             // Optional: Could show a loading spinner here too\n             null\n          )}\n        </main>\n\n        {/* Footer or other sections can go here */}\n        {/* <footer className=\"app-footer\"> Your Footer Content </footer> */}\n\n      </div>\n      {/* Notification component (like react-toastify container) usually lives outside main structure */}\n      <Notification />\n    </>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,MAAM,MAAM,8CAA8C;AACjE,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAOC,YAAY,MAAM,2BAA2B,CAAC,CAAC;AACtD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACiB,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACmB,SAAS,EAAEC,YAAY,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACqB,SAAS,EAAEC,YAAY,CAAC,GAAGtB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAClD,MAAM,CAACuB,OAAO,EAAEC,UAAU,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE9CC,SAAS,CAAC,MAAM;IACd,MAAMwB,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChCH,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;MACpB;MACA,IAAII,MAAM,CAACC,QAAQ,EAAE;QACnB,IAAI;UACF,MAAMV,QAAQ,GAAG,IAAIf,MAAM,CAAC0B,SAAS,CAACC,YAAY,CAACH,MAAM,CAACC,QAAQ,CAAC;UACnET,WAAW,CAACD,QAAQ,CAAC;;UAErB;UACAS,MAAM,CAACC,QAAQ,CAACG,EAAE,CAAC,cAAc,EAAGC,QAAQ,IAAKL,MAAM,CAACM,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC;UAC1EP,MAAM,CAACC,QAAQ,CAACG,EAAE,CAAC,iBAAiB,EAAGI,SAAS,IAAKR,MAAM,CAACM,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;;UAEhF;UACA,MAAMhB,QAAQ,CAACkB,IAAI,CAAC,qBAAqB,EAAE,EAAE,CAAC;UAC9C,MAAMC,MAAM,GAAGnB,QAAQ,CAACoB,SAAS,CAAC,CAAC;UACnC,MAAMC,OAAO,GAAG,MAAMF,MAAM,CAACG,UAAU,CAAC,CAAC;UACzCzB,UAAU,CAACwB,OAAO,CAAC;;UAEnB;UACA,MAAME,WAAW,GAAG,MAAMvB,QAAQ,CAACwB,UAAU,CAAC,CAAC;UAC/CjB,UAAU,CAACgB,WAAW,CAACE,IAAI,KAAK,SAAS,GAAG,cAAcF,WAAW,CAACG,OAAO,GAAG,GAAGH,WAAW,CAACE,IAAI,CAAC;;UAEpG;UACA;UACA,MAAME,eAAe,GAAG,4CAA4C,CAAC,CAAC;UACtE;;UAEA,MAAMC,gBAAgB,GAAG,IAAI3C,MAAM,CAAC4C,QAAQ,CAC1CF,eAAe,EACf7C,MAAM,CAACgD,GAAG,EACVX,MACF,CAAC;UACDpB,WAAW,CAAC6B,gBAAgB,CAAC;UAC7BG,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEJ,gBAAgB,CAAC;QAErD,CAAC,CAAC,OAAOK,KAAK,EAAE;UACdF,OAAO,CAACE,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;UACrD;UACA,IAAIA,KAAK,CAACC,IAAI,KAAK,IAAI,EAAE;YACvBH,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;UAClD;QACF,CAAC,SAAS;UACR3B,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;QACvB;MACF,CAAC,MAAM;QACL0B,OAAO,CAACE,KAAK,CAAC,4CAA4C,CAAC;QAC3DE,KAAK,CAAC,mEAAmE,CAAC;QAC1E9B,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAEDG,aAAa,CAAC,CAAC;;IAEf;IACA,OAAO,MAAM;MAAA,IAAA4B,gBAAA;MACT,KAAAA,gBAAA,GAAI3B,MAAM,CAACC,QAAQ,cAAA0B,gBAAA,eAAfA,gBAAA,CAAiBC,cAAc,EAAE;QACjC5B,MAAM,CAACC,QAAQ,CAAC2B,cAAc,CAAC,cAAc,EAAE,MAAM5B,MAAM,CAACM,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC;QAC9EP,MAAM,CAACC,QAAQ,CAAC2B,cAAc,CAAC,iBAAiB,EAAE,MAAM5B,MAAM,CAACM,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC;MACrF;IACJ,CAAC;EAEH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEzB,OAAA,CAAAE,SAAA;IAAA6C,QAAA,GAEGpC,SAAS,iBACRX,OAAA,CAACH,KAAK;MAACe,YAAY,EAAEA,YAAa;MAACL,QAAQ,EAAEA;IAAS;MAAAyC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAC/D,eAGDnD,OAAA;MAAKoD,SAAS,EAAC,eAAe;MAAAL,QAAA,gBAE5B/C,OAAA;QAAQoD,SAAS,EAAC,YAAY;QAAAL,QAAA,gBAC5B/C,OAAA;UAAKoD,SAAS,EAAC,cAAc;UAAAL,QAAA,gBAC1B/C,OAAA;YAAA+C,QAAA,EAAI;UAAgB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,KAAC,eAC1BnD,OAAA;YAAMoD,SAAS,EAAC,UAAU;YAAAL,QAAA,EAAC;UAA0C;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1E,CAAC,eACNnD,OAAA;UAAKoD,SAAS,EAAC,iBAAiB;UAAAL,QAAA,GAC5BlC,SAAS,gBACPb,OAAA;YAAMoD,SAAS,EAAC,2BAA2B;YAAAL,QAAA,EAAC;UAAa;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,GAC/D9C,OAAO,gBACRL,OAAA;YAAKoD,SAAS,EAAC,iBAAiB;YAAAL,QAAA,gBAC5B/C,OAAA;cAAMoD,SAAS,EAAC,iBAAiB;cAACC,KAAK,EAAEhD,OAAQ;cAAA0C,QAAA,GAAC,aACnC,EAAC1C,OAAO,CAACiD,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,KAAG,EAACjD,OAAO,CAACiD,SAAS,CAACjD,OAAO,CAACkD,MAAM,GAAG,CAAC,CAAC;YAAA;cAAAP,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC3E,CAAC,eACPnD,OAAA;cAAMoD,SAAS,EAAC,cAAc;cAAAL,QAAA,GAAC,WAClB,EAAChC,OAAO,IAAI,YAAY;YAAA;cAAAiC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC/B,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN,CAAC,gBAENnD,OAAA;YAAMoD,SAAS,EAAC,gCAAgC;YAAAL,QAAA,EAAC;UAAa;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CACtE,EAEA9C,OAAO,IAAI,CAACM,SAAS,iBACpBX,OAAA;YAAQoD,SAAS,EAAC,qBAAqB;YAACI,OAAO,EAAEA,CAAA,KAAM5C,YAAY,CAAC,IAAI,CAAE;YAAAmC,QAAA,EAAC;UAE3E;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CACT;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eAGTnD,OAAA;QAAMoD,SAAS,EAAC,UAAU;QAAAL,QAAA,EAEvB1C,OAAO,IAAIE,QAAQ,gBAClBP,OAAA,CAAAE,SAAA;UAAA6C,QAAA,gBACE/C,OAAA,CAACL,UAAU;YACTU,OAAO,EAAEA,OAAQ;YACjBI,QAAQ,EAAEA,QAAS;YACnBF,QAAQ,EAAEA;UAAS;YAAAyC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACpB,CAAC,eACFnD,OAAA,CAACJ,OAAO;YAACW,QAAQ,EAAEA,QAAS;YAACF,OAAO,EAAEA;UAAQ;YAAA2C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA,eACjD,CAAC,GACD,CAACtC,SAAS;QAAA;QACZ;QACAb,OAAA;UAAKoD,SAAS,EAAC,gBAAgB;UAAAL,QAAA,gBAC7B/C,OAAA;YAAA+C,QAAA,EAAI;UAA2D;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACpEnD,OAAA;YAAA+C,QAAA,EAAG;UAAuE;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAE3E,CAAC;QAEL;QACA;MACF;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKJ,CAAC,eAENnD,OAAA,CAACF,YAAY;MAAAkD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eAChB,CAAC;AAEP;AAAC/C,EAAA,CAhJQD,GAAG;AAAAsD,EAAA,GAAHtD,GAAG;AAkJZ,eAAeA,GAAG;AAAC,IAAAsD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}