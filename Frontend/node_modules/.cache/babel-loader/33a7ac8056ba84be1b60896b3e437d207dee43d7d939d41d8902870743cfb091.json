{"ast":null,"code":"var _jsxFileName = \"/home/pranav/Documents/Blockchain-Project/Blockchain-Project/Blockchain-Project/t/client/src/components/Display.js\",\n  _s = $RefreshSig$();\nimport { useState, useCallback } from \"react\"; // Import useCallback\nimport \"./Display.css\";\n\n// --- Hashing Helper (for ArrayBuffer) ---\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst calculateArrayBufferHash = async buffer => {\n  if (!buffer || buffer.byteLength === 0) {\n    throw new Error(\"Cannot hash empty or invalid buffer.\");\n  }\n  try {\n    const hashBuffer = await crypto.subtle.digest('SHA-256', buffer);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n    return hashHex;\n  } catch (error) {\n    console.error(\"Error during crypto.subtle.digest:\", error);\n    throw new Error(\"Hashing failed. Crypto API might not be available or input was invalid.\");\n  }\n};\n\n// Helper function to construct a displayable URL\nconst buildDisplayUrl = cidOrUri => {\n  if (!cidOrUri || typeof cidOrUri !== 'string' || cidOrUri.trim().length === 0) {\n    console.warn(`Invalid input for buildDisplayUrl: ${cidOrUri}`);\n    return null;\n  }\n  const gateway = \"https://gateway.pinata.cloud/ipfs/\"; // Or your preferred gateway\n\n  // 1. Check if it's already a full gateway URL\n  if (cidOrUri.startsWith(gateway)) {\n    return cidOrUri;\n  }\n  // 2. Check for ipfs:// URI scheme\n  else if (cidOrUri.startsWith('ipfs://')) {\n    const cid = cidOrUri.substring(7);\n    // Basic CID length validation (adjust if needed for different hash types)\n    if (cid.length > 40) {\n      return `${gateway}${cid}`;\n    } else {\n      console.warn(`Extracted potentially invalid CID from ipfs:// URI: ${cidOrUri}`);\n      return null; // Or return constructed URL anyway if you want to try\n    }\n  }\n  // 3. Check for standard CID formats (CIDv0 'Qm...' or CIDv1 'b...')\n  //    Combined with a reasonable length check.\n  else if ((cidOrUri.startsWith('Qm') || cidOrUri.startsWith('b')) && cidOrUri.length > 40) {\n    console.log(`Identified CID: ${cidOrUri}, building URL.`); // Add log for successful identification\n    return `${gateway}${cidOrUri}`;\n  }\n  // 4. If none of the above, it's an unrecognized format\n  else {\n    console.warn(`Skipping unrecognized format for URL building: ${cidOrUri}`);\n    return null;\n  }\n};\nconst Display = ({\n  contract,\n  account\n}) => {\n  _s();\n  const [displayData, setDisplayData] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  // --- State for verification status (maps CID/hash to status string) ---\n  const [verificationStatus, setVerificationStatus] = useState({});\n  const getdata = async () => {\n    setDisplayData([]);\n    setMessage(\"\");\n    setLoading(true);\n    setVerificationStatus({}); // Clear verification statuses on new fetch\n\n    // ... (keep the existing address validation and setup) ...\n    const otherAddressInput = document.querySelector(\".address\");\n    const otherAddress = otherAddressInput === null || otherAddressInput === void 0 ? void 0 : otherAddressInput.value.trim();\n    const addressToQuery = otherAddress || account;\n    if (!contract) {\n      /* ... */setLoading(false);\n      return;\n    }\n    if (!addressToQuery) {\n      /* ... */setLoading(false);\n      return;\n    }\n    if (!/^0x[a-fA-F0-9]{40}$/.test(addressToQuery)) {\n      /* ... */setLoading(false);\n      return;\n    }\n    try {\n      setMessage(`Fetching images and hashes for ${addressToQuery.substring(0, 6)}...${addressToQuery.substring(addressToQuery.length - 4)}`);\n      // ... (keep the contract call and initial data processing) ...\n      const result = await contract.display(addressToQuery);\n      console.log(\"Raw contract result:\", result);\n      if (Array.isArray(result) && result.length === 2 && Array.isArray(result[0]) && Array.isArray(result[1])) {\n        console.log(\"CIDs Array Received:\", JSON.stringify(result[0], null, 2)); // Log CIDs clearly\n        console.log(\"Hashes Array Received:\", JSON.stringify(result[1], null, 2)); // Log Hashes too\n      } else {\n        console.error(\"Contract display function did not return the expected structure [[string], [string]]\");\n      }\n      // ... (keep validation of result structure) ...\n      if (!Array.isArray(result) || result.length !== 2 || !Array.isArray(result[0]) || !Array.isArray(result[1])) {\n        console.error(\"Unexpected data structure returned from contract:\", result);\n        throw new Error(\"Received invalid data structure from the smart contract.\");\n      }\n      const cidsArray = result[0];\n      const hashesArray = result[1];\n      if (cidsArray.length !== hashesArray.length) {\n        console.error(\"Mismatched lengths between CIDs and Hashes arrays:\", cidsArray.length, hashesArray.length);\n        throw new Error(\"Contract returned mismatched CID and Hash data.\");\n      }\n      if (cidsArray.length === 0) {\n        // ... (handle no data case) ...\n        setMessage(`No image data found for address ${addressToQuery.substring(0, 6)}...`);\n        setDisplayData([]);\n      } else {\n        const processedData = [];\n        const initialStatus = {}; // Prepare initial status for newly fetched items\n        for (let i = 0; i < cidsArray.length; i++) {\n          const cid = cidsArray[i];\n          const hash = hashesArray[i];\n          const displayUrl = buildDisplayUrl(cid);\n          if (displayUrl && hash) {\n            const uniqueId = cid || hash; // Use CID preferably, fallback to hash\n            processedData.push({\n              id: uniqueId,\n              // Add a unique ID for state management\n              cid: cid,\n              hash: hash,\n              displayUrl: displayUrl\n            });\n            initialStatus[uniqueId] = 'idle'; // Set initial status\n          } else {\n            // ... (handle skipping item) ...\n          }\n        }\n        // ... (handle processedData length check) ...\n        if (processedData.length > 0) {\n          setDisplayData(processedData);\n          setVerificationStatus(initialStatus); // Set statuses for displayed items\n          setMessage(\"\");\n        } else {\n          // ...\n        }\n      }\n    } catch (e) {\n      // ... (keep existing error handling) ...\n      console.error(\"Error during getdata execution:\", e);\n      const specificError = e.reason || (e.data ? e.data.message : null) || e.message || \"An unknown error occurred.\";\n      setMessage(`Error fetching data: ${specificError}`);\n      setDisplayData([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // --- Hash Verification Function ---\n  const verifyHash = useCallback(async (imageUrl, expectedHash, itemId) => {\n    if (!imageUrl || !expectedHash || !itemId) {\n      console.error(\"Missing arguments for verifyHash\");\n      setVerificationStatus(prev => ({\n        ...prev,\n        [itemId]: 'error'\n      }));\n      return;\n    }\n\n    // Prevent re-verification if already verified or failed (optional)\n    // if (verificationStatus[itemId] === 'verified' || verificationStatus[itemId] === 'mismatch' || verificationStatus[itemId] === 'error') return;\n\n    setVerificationStatus(prev => ({\n      ...prev,\n      [itemId]: 'verifying'\n    }));\n    try {\n      console.log(`Verifying: Fetching ${imageUrl}`);\n      // Important: Use CORS mode if gateway requires it (Pinata often doesn't for public content)\n      const response = await fetch(imageUrl); // Consider adding { mode: 'cors' } if needed\n\n      if (!response.ok) {\n        throw new Error(`Fetch failed: ${response.status} ${response.statusText}`);\n      }\n      const imageBuffer = await response.arrayBuffer();\n      console.log(`Verifying: Calculating hash for item ${itemId} (${imageBuffer.byteLength} bytes)`);\n      const calculatedHash = await calculateArrayBufferHash(imageBuffer);\n      console.log(`Verifying: Calculated hash ${calculatedHash} for item ${itemId}`);\n\n      // Case-insensitive comparison\n      if (calculatedHash.toLowerCase() === expectedHash.toLowerCase()) {\n        setVerificationStatus(prev => ({\n          ...prev,\n          [itemId]: 'verified'\n        }));\n        console.log(`✅ Verification SUCCESS for ${itemId}`);\n      } else {\n        setVerificationStatus(prev => ({\n          ...prev,\n          [itemId]: 'mismatch'\n        }));\n        console.warn(`❌ Verification FAILED for ${itemId}: Hash mismatch! Expected: ${expectedHash}, Calculated: ${calculatedHash}`);\n      }\n    } catch (error) {\n      console.error(`❌ Verification ERROR for ${itemId}:`, error);\n      setVerificationStatus(prev => ({\n        ...prev,\n        [itemId]: 'error'\n      }));\n    }\n  }, []); // Empty dependency array because it doesn't depend on component props/state directly\n\n  // --- Helper to get status text and class ---\n  const getStatusInfo = status => {\n    switch (status) {\n      case 'verifying':\n        return {\n          text: 'Verifying...',\n          class: 'status-verifying'\n        };\n      case 'verified':\n        return {\n          text: '✅ Verified',\n          class: 'status-verified'\n        };\n      case 'mismatch':\n        return {\n          text: '❌ Mismatch',\n          class: 'status-mismatch'\n        };\n      case 'error':\n        return {\n          text: '⚠️ Error',\n          class: 'status-error'\n        };\n      case 'idle':\n      default:\n        return {\n          text: 'Not Verified',\n          class: 'status-idle'\n        };\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: `status-message ${message.startsWith('Error') ? 'error' : ''}`,\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 19\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"loading-indicator\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-list\",\n      children: displayData.map(item => {\n        var _item$cid, _item$hash;\n        const statusInfo = getStatusInfo(verificationStatus[item.id]); // Get status text/class\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-item-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"a\", {\n            href: item.displayUrl,\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            className: \"image-link\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: item.displayUrl,\n              alt: `IPFS file: ${(_item$cid = item.cid) === null || _item$cid === void 0 ? void 0 : _item$cid.substring(0, 10)}...`,\n              className: \"image-list-item\",\n              onError: e => {/* ... (existing onError handler) ... */}\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"image-hash\",\n            title: item.hash,\n            children: [\"Hash: \", (_item$hash = item.hash) === null || _item$hash === void 0 ? void 0 : _item$hash.substring(0, 10), \"...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"verification-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: `verification-status ${statusInfo.class}`,\n              children: statusInfo.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 17\n            }, this), (statusInfo.class === 'status-idle' || statusInfo.class === 'status-mismatch' || statusInfo.class === 'status-error') && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"verify-button\",\n              onClick: () => verifyHash(item.displayUrl, item.hash, item.id),\n              disabled: loading || verificationStatus[item.id] === 'verifying',\n              children: \"Verify\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 15\n          }, this)]\n        }, item.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter Address (Optional)\",\n        className: \"address\",\n        disabled: loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"center button\",\n        onClick: getdata,\n        disabled: !contract || loading,\n        children: loading ? \"Loading...\" : \"Get Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Display, \"PNsTf5w1qIECnEVf462mcMTnDoo=\");\n_c = Display;\nexport default Display;\nvar _c;\n$RefreshReg$(_c, \"Display\");","map":{"version":3,"names":["useState","useCallback","jsxDEV","_jsxDEV","Fragment","_Fragment","calculateArrayBufferHash","buffer","byteLength","Error","hashBuffer","crypto","subtle","digest","hashArray","Array","from","Uint8Array","hashHex","map","b","toString","padStart","join","error","console","buildDisplayUrl","cidOrUri","trim","length","warn","gateway","startsWith","cid","substring","log","Display","contract","account","_s","displayData","setDisplayData","message","setMessage","loading","setLoading","verificationStatus","setVerificationStatus","getdata","otherAddressInput","document","querySelector","otherAddress","value","addressToQuery","test","result","display","isArray","JSON","stringify","cidsArray","hashesArray","processedData","initialStatus","i","hash","displayUrl","uniqueId","push","id","e","specificError","reason","data","verifyHash","imageUrl","expectedHash","itemId","prev","response","fetch","ok","status","statusText","imageBuffer","arrayBuffer","calculatedHash","toLowerCase","getStatusInfo","text","class","children","className","fileName","_jsxFileName","lineNumber","columnNumber","item","_item$cid","_item$hash","statusInfo","href","target","rel","src","alt","onError","title","onClick","disabled","type","placeholder","_c","$RefreshReg$"],"sources":["/home/pranav/Documents/Blockchain-Project/Blockchain-Project/Blockchain-Project/t/client/src/components/Display.js"],"sourcesContent":["import { useState, useCallback } from \"react\"; // Import useCallback\nimport \"./Display.css\";\n\n// --- Hashing Helper (for ArrayBuffer) ---\nconst calculateArrayBufferHash = async (buffer) => {\n  if (!buffer || buffer.byteLength === 0) {\n    throw new Error(\"Cannot hash empty or invalid buffer.\");\n  }\n  try {\n    const hashBuffer = await crypto.subtle.digest('SHA-256', buffer);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n    return hashHex;\n  } catch (error) {\n     console.error(\"Error during crypto.subtle.digest:\", error);\n     throw new Error(\"Hashing failed. Crypto API might not be available or input was invalid.\");\n  }\n};\n\n// Helper function to construct a displayable URL\nconst buildDisplayUrl = (cidOrUri) => {\n  if (!cidOrUri || typeof cidOrUri !== 'string' || cidOrUri.trim().length === 0) {\n      console.warn(`Invalid input for buildDisplayUrl: ${cidOrUri}`);\n      return null;\n  }\n  const gateway = \"https://gateway.pinata.cloud/ipfs/\"; // Or your preferred gateway\n\n  // 1. Check if it's already a full gateway URL\n  if (cidOrUri.startsWith(gateway)) {\n      return cidOrUri;\n  }\n  // 2. Check for ipfs:// URI scheme\n  else if (cidOrUri.startsWith('ipfs://')) {\n      const cid = cidOrUri.substring(7);\n      // Basic CID length validation (adjust if needed for different hash types)\n      if (cid.length > 40) {\n         return `${gateway}${cid}`;\n      } else {\n         console.warn(`Extracted potentially invalid CID from ipfs:// URI: ${cidOrUri}`);\n         return null; // Or return constructed URL anyway if you want to try\n      }\n  }\n  // 3. Check for standard CID formats (CIDv0 'Qm...' or CIDv1 'b...')\n  //    Combined with a reasonable length check.\n  else if ((cidOrUri.startsWith('Qm') || cidOrUri.startsWith('b')) && cidOrUri.length > 40) {\n       console.log(`Identified CID: ${cidOrUri}, building URL.`); // Add log for successful identification\n       return `${gateway}${cidOrUri}`;\n  }\n  // 4. If none of the above, it's an unrecognized format\n  else {\n      console.warn(`Skipping unrecognized format for URL building: ${cidOrUri}`);\n      return null;\n  }\n};\n\nconst Display = ({ contract, account }) => {\n  const [displayData, setDisplayData] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  // --- State for verification status (maps CID/hash to status string) ---\n  const [verificationStatus, setVerificationStatus] = useState({});\n\n  const getdata = async () => {\n    setDisplayData([]);\n    setMessage(\"\");\n    setLoading(true);\n    setVerificationStatus({}); // Clear verification statuses on new fetch\n\n    // ... (keep the existing address validation and setup) ...\n    const otherAddressInput = document.querySelector(\".address\");\n    const otherAddress = otherAddressInput?.value.trim();\n    const addressToQuery = otherAddress || account;\n\n    if (!contract) { /* ... */ setLoading(false); return; }\n    if (!addressToQuery) { /* ... */ setLoading(false); return; }\n    if (!/^0x[a-fA-F0-9]{40}$/.test(addressToQuery)) { /* ... */ setLoading(false); return; }\n\n    try {\n      setMessage(`Fetching images and hashes for ${addressToQuery.substring(0,6)}...${addressToQuery.substring(addressToQuery.length-4)}`);\n      // ... (keep the contract call and initial data processing) ...\n      const result = await contract.display(addressToQuery);\n      console.log(\"Raw contract result:\", result);\n      if (Array.isArray(result) && result.length === 2 && Array.isArray(result[0]) && Array.isArray(result[1])) {\n          console.log(\"CIDs Array Received:\", JSON.stringify(result[0], null, 2)); // Log CIDs clearly\n          console.log(\"Hashes Array Received:\", JSON.stringify(result[1], null, 2)); // Log Hashes too\n      } else {\n          console.error(\"Contract display function did not return the expected structure [[string], [string]]\");\n      }\n      // ... (keep validation of result structure) ...\n      if (!Array.isArray(result) || result.length !== 2 || !Array.isArray(result[0]) || !Array.isArray(result[1])) {\n          console.error(\"Unexpected data structure returned from contract:\", result);\n          throw new Error(\"Received invalid data structure from the smart contract.\");\n      }\n      const cidsArray = result[0];\n      const hashesArray = result[1];\n       if (cidsArray.length !== hashesArray.length) {\n           console.error(\"Mismatched lengths between CIDs and Hashes arrays:\", cidsArray.length, hashesArray.length);\n           throw new Error(\"Contract returned mismatched CID and Hash data.\");\n       }\n\n      if (cidsArray.length === 0) {\n         // ... (handle no data case) ...\n         setMessage(`No image data found for address ${addressToQuery.substring(0,6)}...`);\n         setDisplayData([]);\n      } else {\n        const processedData = [];\n        const initialStatus = {}; // Prepare initial status for newly fetched items\n        for (let i = 0; i < cidsArray.length; i++) {\n          const cid = cidsArray[i];\n          const hash = hashesArray[i];\n          const displayUrl = buildDisplayUrl(cid);\n\n          if (displayUrl && hash) {\n            const uniqueId = cid || hash; // Use CID preferably, fallback to hash\n            processedData.push({\n              id: uniqueId, // Add a unique ID for state management\n              cid: cid,\n              hash: hash,\n              displayUrl: displayUrl\n            });\n            initialStatus[uniqueId] = 'idle'; // Set initial status\n          } else {\n             // ... (handle skipping item) ...\n          }\n        }\n        // ... (handle processedData length check) ...\n        if (processedData.length > 0) {\n            setDisplayData(processedData);\n            setVerificationStatus(initialStatus); // Set statuses for displayed items\n            setMessage(\"\");\n        } else {\n            // ...\n        }\n      }\n    } catch (e) {\n      // ... (keep existing error handling) ...\n      console.error(\"Error during getdata execution:\", e);\n      const specificError = e.reason || (e.data ? e.data.message : null) || e.message || \"An unknown error occurred.\";\n      setMessage(`Error fetching data: ${specificError}`);\n      setDisplayData([]);\n    } finally {\n       setLoading(false);\n    }\n  };\n\n  // --- Hash Verification Function ---\n  const verifyHash = useCallback(async (imageUrl, expectedHash, itemId) => {\n    if (!imageUrl || !expectedHash || !itemId) {\n        console.error(\"Missing arguments for verifyHash\");\n        setVerificationStatus(prev => ({ ...prev, [itemId]: 'error' }));\n        return;\n    }\n\n    // Prevent re-verification if already verified or failed (optional)\n    // if (verificationStatus[itemId] === 'verified' || verificationStatus[itemId] === 'mismatch' || verificationStatus[itemId] === 'error') return;\n\n    setVerificationStatus(prev => ({ ...prev, [itemId]: 'verifying' }));\n\n    try {\n        console.log(`Verifying: Fetching ${imageUrl}`);\n        // Important: Use CORS mode if gateway requires it (Pinata often doesn't for public content)\n        const response = await fetch(imageUrl); // Consider adding { mode: 'cors' } if needed\n\n        if (!response.ok) {\n            throw new Error(`Fetch failed: ${response.status} ${response.statusText}`);\n        }\n\n        const imageBuffer = await response.arrayBuffer();\n        console.log(`Verifying: Calculating hash for item ${itemId} (${imageBuffer.byteLength} bytes)`);\n\n        const calculatedHash = await calculateArrayBufferHash(imageBuffer);\n        console.log(`Verifying: Calculated hash ${calculatedHash} for item ${itemId}`);\n\n        // Case-insensitive comparison\n        if (calculatedHash.toLowerCase() === expectedHash.toLowerCase()) {\n            setVerificationStatus(prev => ({ ...prev, [itemId]: 'verified' }));\n            console.log(`✅ Verification SUCCESS for ${itemId}`);\n        } else {\n            setVerificationStatus(prev => ({ ...prev, [itemId]: 'mismatch' }));\n            console.warn(`❌ Verification FAILED for ${itemId}: Hash mismatch! Expected: ${expectedHash}, Calculated: ${calculatedHash}`);\n        }\n    } catch (error) {\n        console.error(`❌ Verification ERROR for ${itemId}:`, error);\n        setVerificationStatus(prev => ({ ...prev, [itemId]: 'error' }));\n    }\n  }, []); // Empty dependency array because it doesn't depend on component props/state directly\n\n\n  // --- Helper to get status text and class ---\n  const getStatusInfo = (status) => {\n    switch (status) {\n        case 'verifying': return { text: 'Verifying...', class: 'status-verifying' };\n        case 'verified': return { text: '✅ Verified', class: 'status-verified' };\n        case 'mismatch': return { text: '❌ Mismatch', class: 'status-mismatch' };\n        case 'error': return { text: '⚠️ Error', class: 'status-error' };\n        case 'idle':\n        default: return { text: 'Not Verified', class: 'status-idle' };\n    }\n  };\n\n\n  return (\n    <>\n      {message && <p className={`status-message ${message.startsWith('Error') ? 'error' : ''}`}>{message}</p>}\n      {loading && <p className=\"loading-indicator\">Loading...</p>}\n\n      <div className=\"image-list\">\n        {displayData.map((item) => {\n          const statusInfo = getStatusInfo(verificationStatus[item.id]); // Get status text/class\n          return (\n            <div className=\"image-item-container\" key={item.id}>\n              <a href={item.displayUrl} target=\"_blank\" rel=\"noopener noreferrer\" className=\"image-link\">\n                <img\n                  src={item.displayUrl}\n                  alt={`IPFS file: ${item.cid?.substring(0, 10)}...`}\n                  className=\"image-list-item\"\n                  onError={(e) => { /* ... (existing onError handler) ... */ }}\n                />\n              </a>\n              <p className=\"image-hash\" title={item.hash}>\n                  Hash: {item.hash?.substring(0, 10)}...\n              </p>\n              {/* --- Verification Status & Button --- */}\n              <div className=\"verification-section\">\n                <span className={`verification-status ${statusInfo.class}`}>\n                   {statusInfo.text}\n                </span>\n                {/* Show button only if not verified/verifying */}\n                {(statusInfo.class === 'status-idle' || statusInfo.class === 'status-mismatch' || statusInfo.class === 'status-error') && (\n                  <button\n                    className=\"verify-button\"\n                    onClick={() => verifyHash(item.displayUrl, item.hash, item.id)}\n                    disabled={loading || verificationStatus[item.id] === 'verifying'}\n                  >\n                    Verify\n                  </button>\n                )}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      <div className=\"controls\">\n        <input\n            type=\"text\"\n            placeholder=\"Enter Address (Optional)\"\n            className=\"address\"\n            disabled={loading}\n          />\n          <button\n            className=\"center button\"\n            onClick={getdata}\n            disabled={!contract || loading}\n           >\n            {loading ? \"Loading...\" : \"Get Data\"}\n          </button>\n      </div>\n    </>\n  );\n};\n\nexport default Display;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}