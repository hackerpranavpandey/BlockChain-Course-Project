{"ast":null,"code":"var _jsxFileName = \"/home/pranav/Documents/Blockchain-Project/client/src/App.js\",\n  _s = $RefreshSig$();\nimport Upload from \"./artifacts/contracts/Upload.sol/Upload.json\";\nimport { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport FileUpload from \"./components/FileUpload\";\nimport Display from \"./components/Display\";\nimport Modal from \"./components/Modal\";\nimport Notification from \"./components/Notification\";\nimport \"./App.css\";\n\n// --- IMPORTANT: Replace with your ACTUAL deployed contract address ---\n// This is the default Hardhat Network address. Use the address from your deployment script output.\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CONTRACT_ADDRESS = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\n// Example for Sepolia: const CONTRACT_ADDRESS = \"0xYourDeployedContractAddressOnSepolia\";\n\nfunction App() {\n  _s();\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null); // Added state for signer\n  const [account, setAccount] = useState(\"\");\n  const [contract, setContract] = useState(null);\n  const [network, setNetwork] = useState(null);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [errorMsg, setErrorMsg] = useState(\"\"); // State for connection errors\n\n  // Function to handle initialization and updates\n  const initializeProviderAndSigner = async () => {\n    setErrorMsg(\"\"); // Clear previous errors\n    if (window.ethereum) {\n      try {\n        setIsLoading(true);\n        // Create provider\n        const web3Provider = new ethers.providers.Web3Provider(window.ethereum, \"any\"); // \"any\" allows network changes\n        setProvider(web3Provider);\n\n        // Request accounts & get signer\n        await web3Provider.send(\"eth_requestAccounts\", []);\n        const currentSigner = web3Provider.getSigner();\n        setSigner(currentSigner);\n\n        // Get address\n        const currentAddress = await currentSigner.getAddress();\n        setAccount(currentAddress);\n\n        // Get network\n        const networkData = await web3Provider.getNetwork();\n        const networkName = networkData.name === \"unknown\" ? `Localhost (${networkData.chainId})` : networkData.name;\n        setNetwork(networkName);\n        console.log(`Connected to network: ${networkName} (Chain ID: ${networkData.chainId})`);\n        console.log(`Connected account: ${currentAddress}`);\n\n        // Instantiate contract with the current signer\n        const contractInstance = new ethers.Contract(CONTRACT_ADDRESS, Upload.abi, currentSigner // Use the signer obtained above\n        );\n        setContract(contractInstance);\n        console.log(\"Contract instance created/updated:\", contractInstance.address);\n      } catch (error) {\n        console.error(\"Error initializing provider/signer:\", error);\n        if (error.code === 4001) {\n          setErrorMsg(\"Connection rejected. Please connect MetaMask.\");\n        } else {\n          setErrorMsg(`Connection error: ${error.message}`);\n        }\n        // Reset state on error\n        setAccount(\"\");\n        setSigner(null);\n        setContract(null);\n        setNetwork(null);\n      } finally {\n        setIsLoading(false);\n      }\n    } else {\n      setErrorMsg(\"MetaMask not detected. Please install MetaMask.\");\n      setIsLoading(false);\n    }\n  };\n  useEffect(() => {\n    // Initial connection attempt\n    initializeProviderAndSigner();\n\n    // --- Event Listeners ---\n    const handleAccountsChanged = accounts => {\n      console.log(\"Accounts changed:\", accounts);\n      // Reload or re-initialize on account change\n      // Reloading is simpler to ensure clean state\n      window.location.reload();\n      // Alternatively, re-run initialization:\n      // if (accounts.length === 0) {\n      //   // MetaMask disconnected\n      //   setAccount(\"\"); setSigner(null); setContract(null); setNetwork(null); setErrorMsg(\"Wallet disconnected.\");\n      // } else {\n      //   initializeProviderAndSigner();\n      // }\n    };\n    const handleChainChanged = _chainId => {\n      console.log(\"Network changed to:\", _chainId);\n      // Reload is the safest way to handle network changes with ethers v5/v6\n      window.location.reload();\n    };\n    if (window.ethereum) {\n      // Add listeners after initial connection attempt\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\n      window.ethereum.on('chainChanged', handleChainChanged);\n\n      // Cleanup function to remove listeners when component unmounts\n      return () => {\n        if (window.ethereum.removeListener) {\n          window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n          window.ethereum.removeListener('chainChanged', handleChainChanged);\n        }\n      };\n    }\n  }, []); // Empty dependency array runs only once on mount\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [modalOpen && contract && account && /*#__PURE__*/_jsxDEV(Modal, {\n      setModalOpen: setModalOpen,\n      contract: contract // Pass contract instance (with current signer)\n      ,\n      account: account // Pass current account address\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"app-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header-title\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Welcome to Blockchian Course Project\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"subtitle\",\n            children: \"Deepfake Detection & Decentralized Storage\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header-controls\",\n          children: [isLoading ? /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"connection-status loading\",\n            children: \"Connecting Wallet...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 17\n          }, this) : account ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"connection-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"account-address\",\n              title: account,\n              children: [\"Connected: \", account.substring(0, 6), \"...\", account.substring(account.length - 4)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"network-name\",\n              children: [\"Network: \", network || 'N/A']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"connection-status disconnected\",\n            children: \"Wallet Not Connected\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 17\n          }, this), account && contract && !modalOpen &&\n          /*#__PURE__*/\n          // Only show if connected and contract ready\n          _jsxDEV(\"button\", {\n            className: \"button share-button\",\n            onClick: () => setModalOpen(true),\n            children: \"Share Access\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 16\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"app-main\",\n        children: [errorMsg && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"connect-prompt error\",\n          children: errorMsg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 24\n        }, this), account && contract && provider && signer ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(FileUpload, {\n            account: account,\n            provider: provider // Pass provider if needed by FileUpload\n            ,\n            contract: contract // Pass contract instance\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Display, {\n            contract: contract // Pass contract instance\n            ,\n            account: account // Pass current account\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : !isLoading && !errorMsg ?\n        /*#__PURE__*/\n        // Show prompt only if not loading and no error\n        _jsxDEV(\"div\", {\n          className: \"connect-prompt\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Please connect your MetaMask wallet to use the application.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"(Ensure you are on the correct network: \", network || 'Target Network', \").\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this) : null /* Or a global loading indicator */]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Notification, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"aOku+2ugLAXVT+HKKK1KjRSvM4I=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Upload","useState","useEffect","ethers","FileUpload","Display","Modal","Notification","jsxDEV","_jsxDEV","Fragment","_Fragment","CONTRACT_ADDRESS","App","_s","provider","setProvider","signer","setSigner","account","setAccount","contract","setContract","network","setNetwork","modalOpen","setModalOpen","isLoading","setIsLoading","errorMsg","setErrorMsg","initializeProviderAndSigner","window","ethereum","web3Provider","providers","Web3Provider","send","currentSigner","getSigner","currentAddress","getAddress","networkData","getNetwork","networkName","name","chainId","console","log","contractInstance","Contract","abi","address","error","code","message","handleAccountsChanged","accounts","location","reload","handleChainChanged","_chainId","on","removeListener","children","fileName","_jsxFileName","lineNumber","columnNumber","className","title","substring","length","onClick","_c","$RefreshReg$"],"sources":["/home/pranav/Documents/Blockchain-Project/client/src/App.js"],"sourcesContent":["import Upload from \"./artifacts/contracts/Upload.sol/Upload.json\";\nimport { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport FileUpload from \"./components/FileUpload\";\nimport Display from \"./components/Display\";\nimport Modal from \"./components/Modal\";\nimport Notification from \"./components/Notification\";\nimport \"./App.css\";\n\n// --- IMPORTANT: Replace with your ACTUAL deployed contract address ---\n// This is the default Hardhat Network address. Use the address from your deployment script output.\nconst CONTRACT_ADDRESS = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\n// Example for Sepolia: const CONTRACT_ADDRESS = \"0xYourDeployedContractAddressOnSepolia\";\n\nfunction App() {\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null); // Added state for signer\n  const [account, setAccount] = useState(\"\");\n  const [contract, setContract] = useState(null);\n  const [network, setNetwork] = useState(null);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [errorMsg, setErrorMsg] = useState(\"\"); // State for connection errors\n\n  // Function to handle initialization and updates\n  const initializeProviderAndSigner = async () => {\n    setErrorMsg(\"\"); // Clear previous errors\n    if (window.ethereum) {\n      try {\n        setIsLoading(true);\n        // Create provider\n        const web3Provider = new ethers.providers.Web3Provider(window.ethereum, \"any\"); // \"any\" allows network changes\n        setProvider(web3Provider);\n\n        // Request accounts & get signer\n        await web3Provider.send(\"eth_requestAccounts\", []);\n        const currentSigner = web3Provider.getSigner();\n        setSigner(currentSigner);\n\n        // Get address\n        const currentAddress = await currentSigner.getAddress();\n        setAccount(currentAddress);\n\n        // Get network\n        const networkData = await web3Provider.getNetwork();\n        const networkName = networkData.name === \"unknown\" ? `Localhost (${networkData.chainId})` : networkData.name;\n        setNetwork(networkName);\n        console.log(`Connected to network: ${networkName} (Chain ID: ${networkData.chainId})`);\n        console.log(`Connected account: ${currentAddress}`);\n\n        // Instantiate contract with the current signer\n        const contractInstance = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          Upload.abi,\n          currentSigner // Use the signer obtained above\n        );\n        setContract(contractInstance);\n        console.log(\"Contract instance created/updated:\", contractInstance.address);\n\n      } catch (error) {\n        console.error(\"Error initializing provider/signer:\", error);\n        if (error.code === 4001) {\n          setErrorMsg(\"Connection rejected. Please connect MetaMask.\");\n        } else {\n          setErrorMsg(`Connection error: ${error.message}`);\n        }\n        // Reset state on error\n        setAccount(\"\");\n        setSigner(null);\n        setContract(null);\n        setNetwork(null);\n      } finally {\n        setIsLoading(false);\n      }\n    } else {\n      setErrorMsg(\"MetaMask not detected. Please install MetaMask.\");\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    // Initial connection attempt\n    initializeProviderAndSigner();\n\n    // --- Event Listeners ---\n    const handleAccountsChanged = (accounts) => {\n      console.log(\"Accounts changed:\", accounts);\n      // Reload or re-initialize on account change\n      // Reloading is simpler to ensure clean state\n      window.location.reload();\n      // Alternatively, re-run initialization:\n      // if (accounts.length === 0) {\n      //   // MetaMask disconnected\n      //   setAccount(\"\"); setSigner(null); setContract(null); setNetwork(null); setErrorMsg(\"Wallet disconnected.\");\n      // } else {\n      //   initializeProviderAndSigner();\n      // }\n    };\n\n    const handleChainChanged = (_chainId) => {\n      console.log(\"Network changed to:\", _chainId);\n      // Reload is the safest way to handle network changes with ethers v5/v6\n      window.location.reload();\n    };\n\n    if (window.ethereum) {\n      // Add listeners after initial connection attempt\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\n      window.ethereum.on('chainChanged', handleChainChanged);\n\n      // Cleanup function to remove listeners when component unmounts\n      return () => {\n        if (window.ethereum.removeListener) {\n          window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n          window.ethereum.removeListener('chainChanged', handleChainChanged);\n        }\n      };\n    }\n  }, []); // Empty dependency array runs only once on mount\n\n  return (\n    <>\n      {/* Render Modal only if contract and account are available */}\n      {modalOpen && contract && account && (\n        <Modal\n          setModalOpen={setModalOpen}\n          contract={contract} // Pass contract instance (with current signer)\n          account={account}   // Pass current account address\n        />\n      )}\n\n      <div className=\"app-container\">\n        <header className=\"app-header\">\n          <div className=\"header-title\">\n            <h1>Welcome to Blockchian Course Project</h1>\n            <span className=\"subtitle\">Deepfake Detection & Decentralized Storage</span>\n          </div>\n          <div className=\"header-controls\">\n             {/* Loading/Connection Status */}\n             {isLoading ? (\n                <span className=\"connection-status loading\">Connecting Wallet...</span>\n             ) : account ? (\n                <div className=\"connection-info\">\n                    <span className=\"account-address\" title={account}>\n                        Connected: {account.substring(0, 6)}...{account.substring(account.length - 4)}\n                    </span>\n                    <span className=\"network-name\">\n                        Network: {network || 'N/A'}\n                    </span>\n                </div>\n             ) : (\n                <span className=\"connection-status disconnected\">Wallet Not Connected</span>\n             )}\n             {/* Share Button */}\n             {account && contract && !modalOpen && ( // Only show if connected and contract ready\n               <button className=\"button share-button\" onClick={() => setModalOpen(true)}>\n                 Share Access\n               </button>\n             )}\n          </div>\n        </header>\n\n        <main className=\"app-main\">\n          {/* Display error messages */}\n          {errorMsg && <div className=\"connect-prompt error\">{errorMsg}</div>}\n\n          {/* Display components only when fully connected and ready */}\n          {account && contract && provider && signer ? (\n            <>\n              <FileUpload\n                account={account}\n                provider={provider} // Pass provider if needed by FileUpload\n                contract={contract}   // Pass contract instance\n              />\n              <Display\n                contract={contract}   // Pass contract instance\n                account={account}     // Pass current account\n              />\n            </>\n          ) : !isLoading && !errorMsg ? ( // Show prompt only if not loading and no error\n            <div className=\"connect-prompt\">\n              <h2>Please connect your MetaMask wallet to use the application.</h2>\n              <p>(Ensure you are on the correct network: {network || 'Target Network'}).</p>\n            </div>\n          ) : null /* Or a global loading indicator */}\n        </main>\n      </div>\n      <Notification />\n    </>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}